// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directory_model.proto

#include "directory_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_directory_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentService_directory_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_directory_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhitePageEntry_directory_5fmodel_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class WhitePagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhitePages> _instance;
} _WhitePages_default_instance_;
class WhitePageEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhitePageEntry> _instance;
} _WhitePageEntry_default_instance_;
class AgentServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentService> _instance;
} _AgentService_default_instance_;
class YellowPagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<YellowPages> _instance;
} _YellowPages_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
static void InitDefaultsscc_info_AgentService_directory_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_AgentService_default_instance_;
    new (ptr) ::org::copdai::core::model::AgentService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::AgentService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentService_directory_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentService_directory_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_WhitePageEntry_directory_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_WhitePageEntry_default_instance_;
    new (ptr) ::org::copdai::core::model::WhitePageEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::WhitePageEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhitePageEntry_directory_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WhitePageEntry_directory_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_WhitePages_directory_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_WhitePages_default_instance_;
    new (ptr) ::org::copdai::core::model::WhitePages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::WhitePages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WhitePages_directory_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WhitePages_directory_5fmodel_2eproto}, {
      &scc_info_WhitePageEntry_directory_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_YellowPages_directory_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_YellowPages_default_instance_;
    new (ptr) ::org::copdai::core::model::YellowPages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::YellowPages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_YellowPages_directory_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_YellowPages_directory_5fmodel_2eproto}, {
      &scc_info_AgentService_directory_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_directory_5fmodel_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_directory_5fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_directory_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_directory_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePages, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePages, entries_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePages, lastupdate_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePageEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePageEntry, aid_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePageEntry, addresses_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::WhitePageEntry, time_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, aid_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, name_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, type_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, inputtype_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, outputtye_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AgentService, pattern_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::YellowPages, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::YellowPages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::YellowPages, agentservices_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::YellowPages, lastupdate_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::org::copdai::core::model::WhitePages)},
  { 9, 17, sizeof(::org::copdai::core::model::WhitePageEntry)},
  { 20, 31, sizeof(::org::copdai::core::model::AgentService)},
  { 37, 44, sizeof(::org::copdai::core::model::YellowPages)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_WhitePages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_WhitePageEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_AgentService_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_YellowPages_default_instance_),
};

const char descriptor_table_protodef_directory_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025directory_model.proto\022\025org.copdai.core"
  ".model\"X\n\nWhitePages\0226\n\007entries\030\002 \003(\0132%."
  "org.copdai.core.model.WhitePageEntry\022\022\n\n"
  "lastUpdate\030\017 \002(\001\">\n\016WhitePageEntry\022\013\n\003ai"
  "d\030\001 \002(\t\022\021\n\taddresses\030\002 \003(\t\022\014\n\004time\030\017 \002(\001"
  "\"\240\001\n\014AgentService\022\013\n\003aid\030\001 \002(\t\022\014\n\004name\030\002"
  " \002(\t\022\014\n\004type\030\003 \001(\t\022\021\n\tinputType\030\004 \001(\t\022\021\n"
  "\toutputTye\030\005 \001(\t\022A\n\007pattern\030\010 \002(\01620.org."
  "copdai.core.model.ServiceConsumptionPatt"
  "ern\"]\n\013YellowPages\022:\n\ragentServices\030\001 \003("
  "\0132#.org.copdai.core.model.AgentService\022\022"
  "\n\nlastUpdate\030\017 \002(\001*i\n\031ServiceConsumption"
  "Pattern\022\022\n\016REQUEST_REPLAY\020\000\022\025\n\021PUBLISH_S"
  "UBSCRIBE\020\001\022\r\n\tPUSH_PULL\020\002\022\022\n\016EXCLUSIVE_P"
  "AIR\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_directory_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_directory_5fmodel_2eproto_sccs[4] = {
  &scc_info_AgentService_directory_5fmodel_2eproto.base,
  &scc_info_WhitePageEntry_directory_5fmodel_2eproto.base,
  &scc_info_WhitePages_directory_5fmodel_2eproto.base,
  &scc_info_YellowPages_directory_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_directory_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_directory_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_directory_5fmodel_2eproto, "directory_model.proto", 565,
  &descriptor_table_directory_5fmodel_2eproto_once, descriptor_table_directory_5fmodel_2eproto_sccs, descriptor_table_directory_5fmodel_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_directory_5fmodel_2eproto::offsets,
  file_level_metadata_directory_5fmodel_2eproto, 4, file_level_enum_descriptors_directory_5fmodel_2eproto, file_level_service_descriptors_directory_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_directory_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_directory_5fmodel_2eproto)), true);
namespace org {
namespace copdai {
namespace core {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceConsumptionPattern_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_directory_5fmodel_2eproto);
  return file_level_enum_descriptors_directory_5fmodel_2eproto[0];
}
bool ServiceConsumptionPattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void WhitePages::InitAsDefaultInstance() {
}
class WhitePages::_Internal {
 public:
  using HasBits = decltype(std::declval<WhitePages>()._has_bits_);
  static void set_has_lastupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

WhitePages::WhitePages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.WhitePages)
}
WhitePages::WhitePages(const WhitePages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lastupdate_ = from.lastupdate_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.WhitePages)
}

void WhitePages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WhitePages_directory_5fmodel_2eproto.base);
  lastupdate_ = 0;
}

WhitePages::~WhitePages() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.WhitePages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WhitePages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WhitePages::ArenaDtor(void* object) {
  WhitePages* _this = reinterpret_cast< WhitePages* >(object);
  (void)_this;
}
void WhitePages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhitePages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhitePages& WhitePages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WhitePages_directory_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WhitePages::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.WhitePages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  lastupdate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhitePages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.WhitePageEntry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required double lastUpdate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_lastupdate(&has_bits);
          lastupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhitePages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.WhitePages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.WhitePageEntry entries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_entries(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double lastUpdate = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_lastupdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.WhitePages)
  return target;
}

size_t WhitePages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.WhitePages)
  size_t total_size = 0;

  // required double lastUpdate = 15;
  if (_internal_has_lastupdate()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.WhitePageEntry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhitePages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.WhitePages)
  GOOGLE_DCHECK_NE(&from, this);
  const WhitePages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhitePages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.WhitePages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.WhitePages)
    MergeFrom(*source);
  }
}

void WhitePages::MergeFrom(const WhitePages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.WhitePages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_has_lastupdate()) {
    _internal_set_lastupdate(from._internal_lastupdate());
  }
}

void WhitePages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.WhitePages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhitePages::CopyFrom(const WhitePages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.WhitePages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhitePages::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void WhitePages::InternalSwap(WhitePages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  swap(lastupdate_, other->lastupdate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WhitePages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WhitePageEntry::InitAsDefaultInstance() {
}
class WhitePageEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<WhitePageEntry>()._has_bits_);
  static void set_has_aid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

WhitePageEntry::WhitePageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.WhitePageEntry)
}
WhitePageEntry::WhitePageEntry(const WhitePageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_aid()) {
    aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aid(),
      GetArena());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.WhitePageEntry)
}

void WhitePageEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WhitePageEntry_directory_5fmodel_2eproto.base);
  aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = 0;
}

WhitePageEntry::~WhitePageEntry() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.WhitePageEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WhitePageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  aid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WhitePageEntry::ArenaDtor(void* object) {
  WhitePageEntry* _this = reinterpret_cast< WhitePageEntry* >(object);
  (void)_this;
}
void WhitePageEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhitePageEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhitePageEntry& WhitePageEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WhitePageEntry_directory_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void WhitePageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.WhitePageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    aid_.ClearNonDefaultToEmpty();
  }
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhitePageEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string aid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_aid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.WhitePageEntry.aid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.WhitePageEntry.addresses");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhitePageEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.WhitePageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string aid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_aid().data(), static_cast<int>(this->_internal_aid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.WhitePageEntry.aid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aid(), target);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.WhitePageEntry.addresses");
    target = stream->WriteString(2, s, target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.WhitePageEntry)
  return target;
}

size_t WhitePageEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.WhitePageEntry)
  size_t total_size = 0;

  if (_internal_has_aid()) {
    // required string aid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aid());
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t WhitePageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.WhitePageEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string aid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aid());

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhitePageEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.WhitePageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const WhitePageEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhitePageEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.WhitePageEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.WhitePageEntry)
    MergeFrom(*source);
  }
}

void WhitePageEntry::MergeFrom(const WhitePageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.WhitePageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_aid(from._internal_aid());
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WhitePageEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.WhitePageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhitePageEntry::CopyFrom(const WhitePageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.WhitePageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhitePageEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void WhitePageEntry::InternalSwap(WhitePageEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addresses_.InternalSwap(&other->addresses_);
  aid_.Swap(&other->aid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WhitePageEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentService::InitAsDefaultInstance() {
}
class AgentService::_Internal {
 public:
  using HasBits = decltype(std::declval<AgentService>()._has_bits_);
  static void set_has_aid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inputtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outputtye(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

AgentService::AgentService(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.AgentService)
}
AgentService::AgentService(const AgentService& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_aid()) {
    aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aid(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  inputtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inputtype()) {
    inputtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inputtype(),
      GetArena());
  }
  outputtye_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_outputtye()) {
    outputtye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_outputtye(),
      GetArena());
  }
  pattern_ = from.pattern_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.AgentService)
}

void AgentService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentService_directory_5fmodel_2eproto.base);
  aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inputtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputtye_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pattern_ = 0;
}

AgentService::~AgentService() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.AgentService)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentService::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  aid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inputtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputtye_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentService::ArenaDtor(void* object) {
  AgentService* _this = reinterpret_cast< AgentService* >(object);
  (void)_this;
}
void AgentService::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentService& AgentService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentService_directory_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AgentService::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.AgentService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      aid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      inputtype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      outputtye_.ClearNonDefaultToEmpty();
    }
  }
  pattern_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string aid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_aid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.AgentService.aid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.AgentService.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.AgentService.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inputType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inputtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.AgentService.inputType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string outputTye = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_outputtye();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.AgentService.outputTye");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::org::copdai::core::model::ServiceConsumptionPattern_IsValid(val))) {
            _internal_set_pattern(static_cast<::org::copdai::core::model::ServiceConsumptionPattern>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentService::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.AgentService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string aid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_aid().data(), static_cast<int>(this->_internal_aid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.AgentService.aid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aid(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.AgentService.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.AgentService.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // optional string inputType = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inputtype().data(), static_cast<int>(this->_internal_inputtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.AgentService.inputType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inputtype(), target);
  }

  // optional string outputTye = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outputtye().data(), static_cast<int>(this->_internal_outputtye().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.AgentService.outputTye");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_outputtye(), target);
  }

  // required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.AgentService)
  return target;
}

size_t AgentService::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.AgentService)
  size_t total_size = 0;

  if (_internal_has_aid()) {
    // required string aid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aid());
  }

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_pattern()) {
    // required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  return total_size;
}
size_t AgentService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.AgentService)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required string aid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aid());

    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pattern());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional string type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string inputType = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inputtype());
    }

    // optional string outputTye = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_outputtye());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentService::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.AgentService)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentService* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentService>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.AgentService)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.AgentService)
    MergeFrom(*source);
  }
}

void AgentService::MergeFrom(const AgentService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.AgentService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_aid(from._internal_aid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_inputtype(from._internal_inputtype());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_outputtye(from._internal_outputtye());
    }
    if (cached_has_bits & 0x00000020u) {
      pattern_ = from.pattern_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AgentService::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.AgentService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentService::CopyFrom(const AgentService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.AgentService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentService::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AgentService::InternalSwap(AgentService* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  aid_.Swap(&other->aid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inputtype_.Swap(&other->inputtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  outputtye_.Swap(&other->outputtye_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pattern_, other->pattern_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentService::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void YellowPages::InitAsDefaultInstance() {
}
class YellowPages::_Internal {
 public:
  using HasBits = decltype(std::declval<YellowPages>()._has_bits_);
  static void set_has_lastupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

YellowPages::YellowPages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agentservices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.YellowPages)
}
YellowPages::YellowPages(const YellowPages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      agentservices_(from.agentservices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lastupdate_ = from.lastupdate_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.YellowPages)
}

void YellowPages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_YellowPages_directory_5fmodel_2eproto.base);
  lastupdate_ = 0;
}

YellowPages::~YellowPages() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.YellowPages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void YellowPages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void YellowPages::ArenaDtor(void* object) {
  YellowPages* _this = reinterpret_cast< YellowPages* >(object);
  (void)_this;
}
void YellowPages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YellowPages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const YellowPages& YellowPages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_YellowPages_directory_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void YellowPages::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.YellowPages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agentservices_.Clear();
  lastupdate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YellowPages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.AgentService agentServices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agentservices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double lastUpdate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_lastupdate(&has_bits);
          lastupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* YellowPages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.YellowPages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.AgentService agentServices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agentservices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agentservices(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double lastUpdate = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_lastupdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.YellowPages)
  return target;
}

size_t YellowPages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.YellowPages)
  size_t total_size = 0;

  // required double lastUpdate = 15;
  if (_internal_has_lastupdate()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.AgentService agentServices = 1;
  total_size += 1UL * this->_internal_agentservices_size();
  for (const auto& msg : this->agentservices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YellowPages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.YellowPages)
  GOOGLE_DCHECK_NE(&from, this);
  const YellowPages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<YellowPages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.YellowPages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.YellowPages)
    MergeFrom(*source);
  }
}

void YellowPages::MergeFrom(const YellowPages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.YellowPages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agentservices_.MergeFrom(from.agentservices_);
  if (from._internal_has_lastupdate()) {
    _internal_set_lastupdate(from._internal_lastupdate());
  }
}

void YellowPages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.YellowPages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YellowPages::CopyFrom(const YellowPages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.YellowPages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowPages::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(agentservices_)) return false;
  return true;
}

void YellowPages::InternalSwap(YellowPages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  agentservices_.InternalSwap(&other->agentservices_);
  swap(lastupdate_, other->lastupdate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YellowPages::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::WhitePages* Arena::CreateMaybeMessage< ::org::copdai::core::model::WhitePages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::WhitePages >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::WhitePageEntry* Arena::CreateMaybeMessage< ::org::copdai::core::model::WhitePageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::WhitePageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::AgentService* Arena::CreateMaybeMessage< ::org::copdai::core::model::AgentService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::AgentService >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::YellowPages* Arena::CreateMaybeMessage< ::org::copdai::core::model::YellowPages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::YellowPages >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
