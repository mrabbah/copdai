// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PictureObjectsDetection.proto

#include "PictureObjectsDetection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PictureObjectsDetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PictureObjectsDetection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class PictureDetectedObjectsHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObjectsHistory> _instance;
} _PictureDetectedObjectsHistory_default_instance_;
class PictureDetectedObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObjects> _instance;
} _PictureDetectedObjects_default_instance_;
class PictureDetectedObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObject> _instance;
} _PictureDetectedObject_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
static void InitDefaultsscc_info_PictureDetectedObject_PictureObjectsDetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObject_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PictureDetectedObject_PictureObjectsDetection_2eproto}, {}};

static void InitDefaultsscc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObjects_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto}, {
      &scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto.base,}};

static void InitDefaultsscc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObjectsHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObjectsHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObjectsHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto}, {
      &scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PictureObjectsDetection_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PictureObjectsDetection_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PictureObjectsDetection_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PictureObjectsDetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, picturesdetectedobjects_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, picturedetectedobjects_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, time_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, x1_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, y1_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, x2_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, y2_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, label_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, confidence_),
  1,
  2,
  3,
  4,
  0,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::org::copdai::core::model::PictureDetectedObjectsHistory)},
  { 13, 20, sizeof(::org::copdai::core::model::PictureDetectedObjects)},
  { 22, 33, sizeof(::org::copdai::core::model::PictureDetectedObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObjectsHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObject_default_instance_),
};

const char descriptor_table_protodef_PictureObjectsDetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035PictureObjectsDetection.proto\022\025org.cop"
  "dai.core.model\"\245\001\n\035PictureDetectedObject"
  "sHistory\022N\n\027picturesDetectedObjects\030\001 \003("
  "\0132-.org.copdai.core.model.PictureDetecte"
  "dObjects\022\020\n\010sentTime\030\r \002(\001\022\021\n\tstartTime\030"
  "\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"t\n\026PictureDetecte"
  "dObjects\022L\n\026pictureDetectedObjects\030\001 \003(\013"
  "2,.org.copdai.core.model.PictureDetected"
  "Object\022\014\n\004time\030\017 \002(\001\"j\n\025PictureDetectedO"
  "bject\022\n\n\002x1\030\001 \002(\001\022\n\n\002y1\030\002 \002(\001\022\n\n\002x2\030\003 \002("
  "\001\022\n\n\002y2\030\004 \002(\001\022\r\n\005label\030\005 \001(\t\022\022\n\nconfiden"
  "ce\030\006 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PictureObjectsDetection_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PictureObjectsDetection_2eproto_sccs[3] = {
  &scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto.base,
  &scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto.base,
  &scc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PictureObjectsDetection_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PictureObjectsDetection_2eproto = {
  false, false, descriptor_table_protodef_PictureObjectsDetection_2eproto, "PictureObjectsDetection.proto", 448,
  &descriptor_table_PictureObjectsDetection_2eproto_once, descriptor_table_PictureObjectsDetection_2eproto_sccs, descriptor_table_PictureObjectsDetection_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_PictureObjectsDetection_2eproto::offsets,
  file_level_metadata_PictureObjectsDetection_2eproto, 3, file_level_enum_descriptors_PictureObjectsDetection_2eproto, file_level_service_descriptors_PictureObjectsDetection_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PictureObjectsDetection_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PictureObjectsDetection_2eproto)), true);
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

void PictureDetectedObjectsHistory::InitAsDefaultInstance() {
}
class PictureDetectedObjectsHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObjectsHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PictureDetectedObjectsHistory::PictureDetectedObjectsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picturesdetectedobjects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObjectsHistory)
}
PictureDetectedObjectsHistory::PictureDetectedObjectsHistory(const PictureDetectedObjectsHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picturesdetectedobjects_(from.picturesdetectedobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObjectsHistory)
}

void PictureDetectedObjectsHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

PictureDetectedObjectsHistory::~PictureDetectedObjectsHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObjectsHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObjectsHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PictureDetectedObjectsHistory::ArenaDtor(void* object) {
  PictureDetectedObjectsHistory* _this = reinterpret_cast< PictureDetectedObjectsHistory* >(object);
  (void)_this;
}
void PictureDetectedObjectsHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObjectsHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObjectsHistory& PictureDetectedObjectsHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObjectsHistory_PictureObjectsDetection_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObjectsHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picturesdetectedobjects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObjectsHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picturesdetectedobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObjectsHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picturesdetectedobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_picturesdetectedobjects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObjectsHistory)
  return target;
}

size_t PictureDetectedObjectsHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PictureDetectedObjectsHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  total_size += 1UL * this->_internal_picturesdetectedobjects_size();
  for (const auto& msg : this->picturesdetectedobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObjectsHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObjectsHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObjectsHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObjectsHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObjectsHistory)
    MergeFrom(*source);
  }
}

void PictureDetectedObjectsHistory::MergeFrom(const PictureDetectedObjectsHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picturesdetectedobjects_.MergeFrom(from.picturesdetectedobjects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PictureDetectedObjectsHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObjectsHistory::CopyFrom(const PictureDetectedObjectsHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObjectsHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(picturesdetectedobjects_)) return false;
  return true;
}

void PictureDetectedObjectsHistory::InternalSwap(PictureDetectedObjectsHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picturesdetectedobjects_.InternalSwap(&other->picturesdetectedobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PictureDetectedObjectsHistory, endtime_)
      + sizeof(PictureDetectedObjectsHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(PictureDetectedObjectsHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObjectsHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PictureDetectedObjects::InitAsDefaultInstance() {
}
class PictureDetectedObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObjects>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PictureDetectedObjects::PictureDetectedObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picturedetectedobjects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObjects)
}
PictureDetectedObjects::PictureDetectedObjects(const PictureDetectedObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picturedetectedobjects_(from.picturedetectedobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObjects)
}

void PictureDetectedObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto.base);
  time_ = 0;
}

PictureDetectedObjects::~PictureDetectedObjects() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObjects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PictureDetectedObjects::ArenaDtor(void* object) {
  PictureDetectedObjects* _this = reinterpret_cast< PictureDetectedObjects* >(object);
  (void)_this;
}
void PictureDetectedObjects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObjects& PictureDetectedObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObjects_PictureObjectsDetection_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picturedetectedobjects_.Clear();
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picturedetectedobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picturedetectedobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_picturedetectedobjects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double time = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObjects)
  return target;
}

size_t PictureDetectedObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObjects)
  size_t total_size = 0;

  // required double time = 15;
  if (_internal_has_time()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  total_size += 1UL * this->_internal_picturedetectedobjects_size();
  for (const auto& msg : this->picturedetectedobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObjects)
    MergeFrom(*source);
  }
}

void PictureDetectedObjects::MergeFrom(const PictureDetectedObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picturedetectedobjects_.MergeFrom(from.picturedetectedobjects_);
  if (from._internal_has_time()) {
    _internal_set_time(from._internal_time());
  }
}

void PictureDetectedObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObjects::CopyFrom(const PictureDetectedObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObjects::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(picturedetectedobjects_)) return false;
  return true;
}

void PictureDetectedObjects::InternalSwap(PictureDetectedObjects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picturedetectedobjects_.InternalSwap(&other->picturedetectedobjects_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PictureDetectedObject::InitAsDefaultInstance() {
}
class PictureDetectedObject::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObject>()._has_bits_);
  static void set_has_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

PictureDetectedObject::PictureDetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObject)
}
PictureDetectedObject::PictureDetectedObject(const PictureDetectedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObject)
}

void PictureDetectedObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
}

PictureDetectedObject::~PictureDetectedObject() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PictureDetectedObject::ArenaDtor(void* object) {
  PictureDetectedObject* _this = reinterpret_cast< PictureDetectedObject* >(object);
  (void)_this;
}
void PictureDetectedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObject& PictureDetectedObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObject_PictureObjectsDetection_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&x1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x1(&has_bits);
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y1(&has_bits);
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double x2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_x2(&has_bits);
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_y2(&has_bits);
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.PictureDetectedObject.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x1(), target);
  }

  // required double y1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y1(), target);
  }

  // required double x2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x2(), target);
  }

  // required double y2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y2(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.PictureDetectedObject.label");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional double confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObject)
  return target;
}

size_t PictureDetectedObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.PictureDetectedObject)
  size_t total_size = 0;

  if (_internal_has_x1()) {
    // required double x1 = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y1()) {
    // required double y1 = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_x2()) {
    // required double x2 = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_y2()) {
    // required double y2 = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PictureDetectedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObject)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required double x1 = 1;
    total_size += 1 + 8;

    // required double y1 = 2;
    total_size += 1 + 8;

    // required double x2 = 3;
    total_size += 1 + 8;

    // required double y2 = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string label = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // optional double confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObject)
    MergeFrom(*source);
  }
}

void PictureDetectedObject::MergeFrom(const PictureDetectedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000004u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000008u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000010u) {
      y2_ = from.y2_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PictureDetectedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObject::CopyFrom(const PictureDetectedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObject::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PictureDetectedObject::InternalSwap(PictureDetectedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PictureDetectedObject, confidence_)
      + sizeof(PictureDetectedObject::confidence_)
      - PROTOBUF_FIELD_OFFSET(PictureDetectedObject, x1_)>(
          reinterpret_cast<char*>(&x1_),
          reinterpret_cast<char*>(&other->x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObjectsHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObjectsHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObjectsHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObjects* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObject* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
