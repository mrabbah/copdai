// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors_data_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensors_5fdata_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensors_5fdata_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensors_5fdata_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_5fdata_5fmodel_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class AngularAcceleration;
class AngularAccelerationDefaultTypeInternal;
extern AngularAccelerationDefaultTypeInternal _AngularAcceleration_default_instance_;
class AngularAccelerationHistory;
class AngularAccelerationHistoryDefaultTypeInternal;
extern AngularAccelerationHistoryDefaultTypeInternal _AngularAccelerationHistory_default_instance_;
class Geolocation;
class GeolocationDefaultTypeInternal;
extern GeolocationDefaultTypeInternal _Geolocation_default_instance_;
class GeolocationHistory;
class GeolocationHistoryDefaultTypeInternal;
extern GeolocationHistoryDefaultTypeInternal _GeolocationHistory_default_instance_;
class LinearAcceleration;
class LinearAccelerationDefaultTypeInternal;
extern LinearAccelerationDefaultTypeInternal _LinearAcceleration_default_instance_;
class LinearAccelerationHistory;
class LinearAccelerationHistoryDefaultTypeInternal;
extern LinearAccelerationHistoryDefaultTypeInternal _LinearAccelerationHistory_default_instance_;
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class OrientationHistory;
class OrientationHistoryDefaultTypeInternal;
extern OrientationHistoryDefaultTypeInternal _OrientationHistory_default_instance_;
class PictureDetectedObject;
class PictureDetectedObjectDefaultTypeInternal;
extern PictureDetectedObjectDefaultTypeInternal _PictureDetectedObject_default_instance_;
class PictureDetectedObjects;
class PictureDetectedObjectsDefaultTypeInternal;
extern PictureDetectedObjectsDefaultTypeInternal _PictureDetectedObjects_default_instance_;
class PictureDetectedObjectsHistory;
class PictureDetectedObjectsHistoryDefaultTypeInternal;
extern PictureDetectedObjectsHistoryDefaultTypeInternal _PictureDetectedObjectsHistory_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::copdai::core::model::AngularAcceleration* Arena::CreateMaybeMessage<::org::copdai::core::model::AngularAcceleration>(Arena*);
template<> ::org::copdai::core::model::AngularAccelerationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::AngularAccelerationHistory>(Arena*);
template<> ::org::copdai::core::model::Geolocation* Arena::CreateMaybeMessage<::org::copdai::core::model::Geolocation>(Arena*);
template<> ::org::copdai::core::model::GeolocationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::GeolocationHistory>(Arena*);
template<> ::org::copdai::core::model::LinearAcceleration* Arena::CreateMaybeMessage<::org::copdai::core::model::LinearAcceleration>(Arena*);
template<> ::org::copdai::core::model::LinearAccelerationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::LinearAccelerationHistory>(Arena*);
template<> ::org::copdai::core::model::Orientation* Arena::CreateMaybeMessage<::org::copdai::core::model::Orientation>(Arena*);
template<> ::org::copdai::core::model::OrientationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::OrientationHistory>(Arena*);
template<> ::org::copdai::core::model::PictureDetectedObject* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObject>(Arena*);
template<> ::org::copdai::core::model::PictureDetectedObjects* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObjects>(Arena*);
template<> ::org::copdai::core::model::PictureDetectedObjectsHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObjectsHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

class GeolocationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.GeolocationHistory) */ {
 public:
  inline GeolocationHistory() : GeolocationHistory(nullptr) {}
  virtual ~GeolocationHistory();

  GeolocationHistory(const GeolocationHistory& from);
  GeolocationHistory(GeolocationHistory&& from) noexcept
    : GeolocationHistory() {
    *this = ::std::move(from);
  }

  inline GeolocationHistory& operator=(const GeolocationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeolocationHistory& operator=(GeolocationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeolocationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeolocationHistory* internal_default_instance() {
    return reinterpret_cast<const GeolocationHistory*>(
               &_GeolocationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeolocationHistory& a, GeolocationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(GeolocationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeolocationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeolocationHistory* New() const final {
    return CreateMaybeMessage<GeolocationHistory>(nullptr);
  }

  GeolocationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeolocationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeolocationHistory& from);
  void MergeFrom(const GeolocationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeolocationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.GeolocationHistory";
  }
  protected:
  explicit GeolocationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeolocationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.Geolocation geolocations = 1;
  int geolocations_size() const;
  private:
  int _internal_geolocations_size() const;
  public:
  void clear_geolocations();
  ::org::copdai::core::model::Geolocation* mutable_geolocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >*
      mutable_geolocations();
  private:
  const ::org::copdai::core::model::Geolocation& _internal_geolocations(int index) const;
  ::org::copdai::core::model::Geolocation* _internal_add_geolocations();
  public:
  const ::org::copdai::core::model::Geolocation& geolocations(int index) const;
  ::org::copdai::core::model::Geolocation* add_geolocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >&
      geolocations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.GeolocationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation > geolocations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Geolocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.Geolocation) */ {
 public:
  inline Geolocation() : Geolocation(nullptr) {}
  virtual ~Geolocation();

  Geolocation(const Geolocation& from);
  Geolocation(Geolocation&& from) noexcept
    : Geolocation() {
    *this = ::std::move(from);
  }

  inline Geolocation& operator=(const Geolocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geolocation& operator=(Geolocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geolocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geolocation* internal_default_instance() {
    return reinterpret_cast<const Geolocation*>(
               &_Geolocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Geolocation& a, Geolocation& b) {
    a.Swap(&b);
  }
  inline void Swap(Geolocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geolocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geolocation* New() const final {
    return CreateMaybeMessage<Geolocation>(nullptr);
  }

  Geolocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geolocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geolocation& from);
  void MergeFrom(const Geolocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geolocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.Geolocation";
  }
  protected:
  explicit Geolocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
    kAltFieldNumber = 3,
    kAccuracyFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kTimeFieldNumber = 15,
  };
  // required double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required double lng = 2;
  bool has_lng() const;
  private:
  bool _internal_has_lng() const;
  public:
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // optional double alt = 3;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // optional double accuracy = 4;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // optional double speed = 5;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.Geolocation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_;
  double lng_;
  double alt_;
  double accuracy_;
  double speed_;
  double time_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class AngularAccelerationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.AngularAccelerationHistory) */ {
 public:
  inline AngularAccelerationHistory() : AngularAccelerationHistory(nullptr) {}
  virtual ~AngularAccelerationHistory();

  AngularAccelerationHistory(const AngularAccelerationHistory& from);
  AngularAccelerationHistory(AngularAccelerationHistory&& from) noexcept
    : AngularAccelerationHistory() {
    *this = ::std::move(from);
  }

  inline AngularAccelerationHistory& operator=(const AngularAccelerationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularAccelerationHistory& operator=(AngularAccelerationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AngularAccelerationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AngularAccelerationHistory* internal_default_instance() {
    return reinterpret_cast<const AngularAccelerationHistory*>(
               &_AngularAccelerationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AngularAccelerationHistory& a, AngularAccelerationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularAccelerationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularAccelerationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AngularAccelerationHistory* New() const final {
    return CreateMaybeMessage<AngularAccelerationHistory>(nullptr);
  }

  AngularAccelerationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AngularAccelerationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AngularAccelerationHistory& from);
  void MergeFrom(const AngularAccelerationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularAccelerationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.AngularAccelerationHistory";
  }
  protected:
  explicit AngularAccelerationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngularAccelerationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.AngularAcceleration angularAccelerations = 1;
  int angularaccelerations_size() const;
  private:
  int _internal_angularaccelerations_size() const;
  public:
  void clear_angularaccelerations();
  ::org::copdai::core::model::AngularAcceleration* mutable_angularaccelerations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AngularAcceleration >*
      mutable_angularaccelerations();
  private:
  const ::org::copdai::core::model::AngularAcceleration& _internal_angularaccelerations(int index) const;
  ::org::copdai::core::model::AngularAcceleration* _internal_add_angularaccelerations();
  public:
  const ::org::copdai::core::model::AngularAcceleration& angularaccelerations(int index) const;
  ::org::copdai::core::model::AngularAcceleration* add_angularaccelerations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AngularAcceleration >&
      angularaccelerations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.AngularAccelerationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AngularAcceleration > angularaccelerations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class AngularAcceleration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.AngularAcceleration) */ {
 public:
  inline AngularAcceleration() : AngularAcceleration(nullptr) {}
  virtual ~AngularAcceleration();

  AngularAcceleration(const AngularAcceleration& from);
  AngularAcceleration(AngularAcceleration&& from) noexcept
    : AngularAcceleration() {
    *this = ::std::move(from);
  }

  inline AngularAcceleration& operator=(const AngularAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularAcceleration& operator=(AngularAcceleration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AngularAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AngularAcceleration* internal_default_instance() {
    return reinterpret_cast<const AngularAcceleration*>(
               &_AngularAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AngularAcceleration& a, AngularAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularAcceleration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AngularAcceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AngularAcceleration* New() const final {
    return CreateMaybeMessage<AngularAcceleration>(nullptr);
  }

  AngularAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AngularAcceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AngularAcceleration& from);
  void MergeFrom(const AngularAcceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularAcceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.AngularAcceleration";
  }
  protected:
  explicit AngularAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimeFieldNumber = 15,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.AngularAcceleration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double time_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LinearAccelerationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.LinearAccelerationHistory) */ {
 public:
  inline LinearAccelerationHistory() : LinearAccelerationHistory(nullptr) {}
  virtual ~LinearAccelerationHistory();

  LinearAccelerationHistory(const LinearAccelerationHistory& from);
  LinearAccelerationHistory(LinearAccelerationHistory&& from) noexcept
    : LinearAccelerationHistory() {
    *this = ::std::move(from);
  }

  inline LinearAccelerationHistory& operator=(const LinearAccelerationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearAccelerationHistory& operator=(LinearAccelerationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearAccelerationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearAccelerationHistory* internal_default_instance() {
    return reinterpret_cast<const LinearAccelerationHistory*>(
               &_LinearAccelerationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinearAccelerationHistory& a, LinearAccelerationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearAccelerationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearAccelerationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearAccelerationHistory* New() const final {
    return CreateMaybeMessage<LinearAccelerationHistory>(nullptr);
  }

  LinearAccelerationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearAccelerationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearAccelerationHistory& from);
  void MergeFrom(const LinearAccelerationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearAccelerationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.LinearAccelerationHistory";
  }
  protected:
  explicit LinearAccelerationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearAccelerationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.LinearAcceleration linearAccelerations = 1;
  int linearaccelerations_size() const;
  private:
  int _internal_linearaccelerations_size() const;
  public:
  void clear_linearaccelerations();
  ::org::copdai::core::model::LinearAcceleration* mutable_linearaccelerations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::LinearAcceleration >*
      mutable_linearaccelerations();
  private:
  const ::org::copdai::core::model::LinearAcceleration& _internal_linearaccelerations(int index) const;
  ::org::copdai::core::model::LinearAcceleration* _internal_add_linearaccelerations();
  public:
  const ::org::copdai::core::model::LinearAcceleration& linearaccelerations(int index) const;
  ::org::copdai::core::model::LinearAcceleration* add_linearaccelerations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::LinearAcceleration >&
      linearaccelerations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.LinearAccelerationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::LinearAcceleration > linearaccelerations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class LinearAcceleration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.LinearAcceleration) */ {
 public:
  inline LinearAcceleration() : LinearAcceleration(nullptr) {}
  virtual ~LinearAcceleration();

  LinearAcceleration(const LinearAcceleration& from);
  LinearAcceleration(LinearAcceleration&& from) noexcept
    : LinearAcceleration() {
    *this = ::std::move(from);
  }

  inline LinearAcceleration& operator=(const LinearAcceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearAcceleration& operator=(LinearAcceleration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearAcceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearAcceleration* internal_default_instance() {
    return reinterpret_cast<const LinearAcceleration*>(
               &_LinearAcceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LinearAcceleration& a, LinearAcceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearAcceleration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearAcceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearAcceleration* New() const final {
    return CreateMaybeMessage<LinearAcceleration>(nullptr);
  }

  LinearAcceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearAcceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearAcceleration& from);
  void MergeFrom(const LinearAcceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearAcceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.LinearAcceleration";
  }
  protected:
  explicit LinearAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimeFieldNumber = 15,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.LinearAcceleration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double time_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class OrientationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.OrientationHistory) */ {
 public:
  inline OrientationHistory() : OrientationHistory(nullptr) {}
  virtual ~OrientationHistory();

  OrientationHistory(const OrientationHistory& from);
  OrientationHistory(OrientationHistory&& from) noexcept
    : OrientationHistory() {
    *this = ::std::move(from);
  }

  inline OrientationHistory& operator=(const OrientationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrientationHistory& operator=(OrientationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrientationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrientationHistory* internal_default_instance() {
    return reinterpret_cast<const OrientationHistory*>(
               &_OrientationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrientationHistory& a, OrientationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(OrientationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrientationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrientationHistory* New() const final {
    return CreateMaybeMessage<OrientationHistory>(nullptr);
  }

  OrientationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrientationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrientationHistory& from);
  void MergeFrom(const OrientationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrientationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.OrientationHistory";
  }
  protected:
  explicit OrientationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.Orientation orientations = 1;
  int orientations_size() const;
  private:
  int _internal_orientations_size() const;
  public:
  void clear_orientations();
  ::org::copdai::core::model::Orientation* mutable_orientations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >*
      mutable_orientations();
  private:
  const ::org::copdai::core::model::Orientation& _internal_orientations(int index) const;
  ::org::copdai::core::model::Orientation* _internal_add_orientations();
  public:
  const ::org::copdai::core::model::Orientation& orientations(int index) const;
  ::org::copdai::core::model::Orientation* add_orientations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >&
      orientations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.OrientationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation > orientations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  virtual ~Orientation();

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
    kTimeFieldNumber = 15,
  };
  // required double azimuth = 1;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // required double pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // required double roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.Orientation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double azimuth_;
  double pitch_;
  double roll_;
  double time_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class PictureDetectedObjectsHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObjectsHistory) */ {
 public:
  inline PictureDetectedObjectsHistory() : PictureDetectedObjectsHistory(nullptr) {}
  virtual ~PictureDetectedObjectsHistory();

  PictureDetectedObjectsHistory(const PictureDetectedObjectsHistory& from);
  PictureDetectedObjectsHistory(PictureDetectedObjectsHistory&& from) noexcept
    : PictureDetectedObjectsHistory() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObjectsHistory& operator=(const PictureDetectedObjectsHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObjectsHistory& operator=(PictureDetectedObjectsHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObjectsHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObjectsHistory* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObjectsHistory*>(
               &_PictureDetectedObjectsHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PictureDetectedObjectsHistory& a, PictureDetectedObjectsHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObjectsHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObjectsHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObjectsHistory* New() const final {
    return CreateMaybeMessage<PictureDetectedObjectsHistory>(nullptr);
  }

  PictureDetectedObjectsHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObjectsHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObjectsHistory& from);
  void MergeFrom(const PictureDetectedObjectsHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObjectsHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObjectsHistory";
  }
  protected:
  explicit PictureDetectedObjectsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesDetectedObjectsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  int picturesdetectedobjects_size() const;
  private:
  int _internal_picturesdetectedobjects_size() const;
  public:
  void clear_picturesdetectedobjects();
  ::org::copdai::core::model::PictureDetectedObjects* mutable_picturesdetectedobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >*
      mutable_picturesdetectedobjects();
  private:
  const ::org::copdai::core::model::PictureDetectedObjects& _internal_picturesdetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObjects* _internal_add_picturesdetectedobjects();
  public:
  const ::org::copdai::core::model::PictureDetectedObjects& picturesdetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObjects* add_picturesdetectedobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >&
      picturesdetectedobjects() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObjectsHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects > picturesdetectedobjects_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class PictureDetectedObjects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObjects) */ {
 public:
  inline PictureDetectedObjects() : PictureDetectedObjects(nullptr) {}
  virtual ~PictureDetectedObjects();

  PictureDetectedObjects(const PictureDetectedObjects& from);
  PictureDetectedObjects(PictureDetectedObjects&& from) noexcept
    : PictureDetectedObjects() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObjects& operator=(const PictureDetectedObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObjects& operator=(PictureDetectedObjects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObjects* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObjects*>(
               &_PictureDetectedObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PictureDetectedObjects& a, PictureDetectedObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObjects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObjects* New() const final {
    return CreateMaybeMessage<PictureDetectedObjects>(nullptr);
  }

  PictureDetectedObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObjects& from);
  void MergeFrom(const PictureDetectedObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObjects";
  }
  protected:
  explicit PictureDetectedObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPictureDetectedObjectsFieldNumber = 1,
    kTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  int picturedetectedobjects_size() const;
  private:
  int _internal_picturedetectedobjects_size() const;
  public:
  void clear_picturedetectedobjects();
  ::org::copdai::core::model::PictureDetectedObject* mutable_picturedetectedobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >*
      mutable_picturedetectedobjects();
  private:
  const ::org::copdai::core::model::PictureDetectedObject& _internal_picturedetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObject* _internal_add_picturedetectedobjects();
  public:
  const ::org::copdai::core::model::PictureDetectedObject& picturedetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObject* add_picturedetectedobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >&
      picturedetectedobjects() const;

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject > picturedetectedobjects_;
  double time_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class PictureDetectedObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObject) */ {
 public:
  inline PictureDetectedObject() : PictureDetectedObject(nullptr) {}
  virtual ~PictureDetectedObject();

  PictureDetectedObject(const PictureDetectedObject& from);
  PictureDetectedObject(PictureDetectedObject&& from) noexcept
    : PictureDetectedObject() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObject& operator=(const PictureDetectedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObject& operator=(PictureDetectedObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObject* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObject*>(
               &_PictureDetectedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PictureDetectedObject& a, PictureDetectedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObject* New() const final {
    return CreateMaybeMessage<PictureDetectedObject>(nullptr);
  }

  PictureDetectedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObject& from);
  void MergeFrom(const PictureDetectedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObject";
  }
  protected:
  explicit PictureDetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensors_5fdata_5fmodel_2eproto);
    return ::descriptor_table_sensors_5fdata_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 5,
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kConfidenceFieldNumber = 6,
  };
  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required double x1 = 1;
  bool has_x1() const;
  private:
  bool _internal_has_x1() const;
  public:
  void clear_x1();
  double x1() const;
  void set_x1(double value);
  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);
  public:

  // required double y1 = 2;
  bool has_y1() const;
  private:
  bool _internal_has_y1() const;
  public:
  void clear_y1();
  double y1() const;
  void set_y1(double value);
  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);
  public:

  // required double x2 = 3;
  bool has_x2() const;
  private:
  bool _internal_has_x2() const;
  public:
  void clear_x2();
  double x2() const;
  void set_x2(double value);
  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);
  public:

  // required double y2 = 4;
  bool has_y2() const;
  private:
  bool _internal_has_y2() const;
  public:
  void clear_y2();
  double y2() const;
  void set_y2(double value);
  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);
  public:

  // optional double confidence = 6;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObject)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double x1_;
  double y1_;
  double x2_;
  double y2_;
  double confidence_;
  friend struct ::TableStruct_sensors_5fdata_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeolocationHistory

// repeated .org.copdai.core.model.Geolocation geolocations = 1;
inline int GeolocationHistory::_internal_geolocations_size() const {
  return geolocations_.size();
}
inline int GeolocationHistory::geolocations_size() const {
  return _internal_geolocations_size();
}
inline void GeolocationHistory::clear_geolocations() {
  geolocations_.Clear();
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::mutable_geolocations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.GeolocationHistory.geolocations)
  return geolocations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >*
GeolocationHistory::mutable_geolocations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.GeolocationHistory.geolocations)
  return &geolocations_;
}
inline const ::org::copdai::core::model::Geolocation& GeolocationHistory::_internal_geolocations(int index) const {
  return geolocations_.Get(index);
}
inline const ::org::copdai::core::model::Geolocation& GeolocationHistory::geolocations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.geolocations)
  return _internal_geolocations(index);
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::_internal_add_geolocations() {
  return geolocations_.Add();
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::add_geolocations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.GeolocationHistory.geolocations)
  return _internal_add_geolocations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >&
GeolocationHistory::geolocations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.GeolocationHistory.geolocations)
  return geolocations_;
}

// required double sentTime = 13;
inline bool GeolocationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GeolocationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void GeolocationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GeolocationHistory::_internal_senttime() const {
  return senttime_;
}
inline double GeolocationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.sentTime)
  return _internal_senttime();
}
inline void GeolocationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void GeolocationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.sentTime)
}

// required double startTime = 14;
inline bool GeolocationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GeolocationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void GeolocationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GeolocationHistory::_internal_starttime() const {
  return starttime_;
}
inline double GeolocationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.startTime)
  return _internal_starttime();
}
inline void GeolocationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void GeolocationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.startTime)
}

// required double endTime = 15;
inline bool GeolocationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GeolocationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void GeolocationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GeolocationHistory::_internal_endtime() const {
  return endtime_;
}
inline double GeolocationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.endTime)
  return _internal_endtime();
}
inline void GeolocationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void GeolocationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.endTime)
}

// -------------------------------------------------------------------

// Geolocation

// required double lat = 1;
inline bool Geolocation::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Geolocation::has_lat() const {
  return _internal_has_lat();
}
inline void Geolocation::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Geolocation::_internal_lat() const {
  return lat_;
}
inline double Geolocation::lat() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.lat)
  return _internal_lat();
}
inline void Geolocation::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_ = value;
}
inline void Geolocation::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.lat)
}

// required double lng = 2;
inline bool Geolocation::_internal_has_lng() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Geolocation::has_lng() const {
  return _internal_has_lng();
}
inline void Geolocation::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Geolocation::_internal_lng() const {
  return lng_;
}
inline double Geolocation::lng() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.lng)
  return _internal_lng();
}
inline void Geolocation::_internal_set_lng(double value) {
  _has_bits_[0] |= 0x00000002u;
  lng_ = value;
}
inline void Geolocation::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.lng)
}

// optional double alt = 3;
inline bool Geolocation::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Geolocation::has_alt() const {
  return _internal_has_alt();
}
inline void Geolocation::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Geolocation::_internal_alt() const {
  return alt_;
}
inline double Geolocation::alt() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.alt)
  return _internal_alt();
}
inline void Geolocation::_internal_set_alt(double value) {
  _has_bits_[0] |= 0x00000004u;
  alt_ = value;
}
inline void Geolocation::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.alt)
}

// optional double accuracy = 4;
inline bool Geolocation::_internal_has_accuracy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Geolocation::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void Geolocation::clear_accuracy() {
  accuracy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Geolocation::_internal_accuracy() const {
  return accuracy_;
}
inline double Geolocation::accuracy() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.accuracy)
  return _internal_accuracy();
}
inline void Geolocation::_internal_set_accuracy(double value) {
  _has_bits_[0] |= 0x00000008u;
  accuracy_ = value;
}
inline void Geolocation::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.accuracy)
}

// optional double speed = 5;
inline bool Geolocation::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Geolocation::has_speed() const {
  return _internal_has_speed();
}
inline void Geolocation::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Geolocation::_internal_speed() const {
  return speed_;
}
inline double Geolocation::speed() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.speed)
  return _internal_speed();
}
inline void Geolocation::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
}
inline void Geolocation::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.speed)
}

// required double time = 15;
inline bool Geolocation::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Geolocation::has_time() const {
  return _internal_has_time();
}
inline void Geolocation::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Geolocation::_internal_time() const {
  return time_;
}
inline double Geolocation::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.time)
  return _internal_time();
}
inline void Geolocation::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  time_ = value;
}
inline void Geolocation::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.time)
}

// -------------------------------------------------------------------

// AngularAccelerationHistory

// repeated .org.copdai.core.model.AngularAcceleration angularAccelerations = 1;
inline int AngularAccelerationHistory::_internal_angularaccelerations_size() const {
  return angularaccelerations_.size();
}
inline int AngularAccelerationHistory::angularaccelerations_size() const {
  return _internal_angularaccelerations_size();
}
inline void AngularAccelerationHistory::clear_angularaccelerations() {
  angularaccelerations_.Clear();
}
inline ::org::copdai::core::model::AngularAcceleration* AngularAccelerationHistory::mutable_angularaccelerations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AngularAccelerationHistory.angularAccelerations)
  return angularaccelerations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AngularAcceleration >*
AngularAccelerationHistory::mutable_angularaccelerations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.AngularAccelerationHistory.angularAccelerations)
  return &angularaccelerations_;
}
inline const ::org::copdai::core::model::AngularAcceleration& AngularAccelerationHistory::_internal_angularaccelerations(int index) const {
  return angularaccelerations_.Get(index);
}
inline const ::org::copdai::core::model::AngularAcceleration& AngularAccelerationHistory::angularaccelerations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAccelerationHistory.angularAccelerations)
  return _internal_angularaccelerations(index);
}
inline ::org::copdai::core::model::AngularAcceleration* AngularAccelerationHistory::_internal_add_angularaccelerations() {
  return angularaccelerations_.Add();
}
inline ::org::copdai::core::model::AngularAcceleration* AngularAccelerationHistory::add_angularaccelerations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.AngularAccelerationHistory.angularAccelerations)
  return _internal_add_angularaccelerations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AngularAcceleration >&
AngularAccelerationHistory::angularaccelerations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.AngularAccelerationHistory.angularAccelerations)
  return angularaccelerations_;
}

// required double sentTime = 13;
inline bool AngularAccelerationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AngularAccelerationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void AngularAccelerationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AngularAccelerationHistory::_internal_senttime() const {
  return senttime_;
}
inline double AngularAccelerationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAccelerationHistory.sentTime)
  return _internal_senttime();
}
inline void AngularAccelerationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void AngularAccelerationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAccelerationHistory.sentTime)
}

// required double startTime = 14;
inline bool AngularAccelerationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AngularAccelerationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void AngularAccelerationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AngularAccelerationHistory::_internal_starttime() const {
  return starttime_;
}
inline double AngularAccelerationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAccelerationHistory.startTime)
  return _internal_starttime();
}
inline void AngularAccelerationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void AngularAccelerationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAccelerationHistory.startTime)
}

// required double endTime = 15;
inline bool AngularAccelerationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AngularAccelerationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void AngularAccelerationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AngularAccelerationHistory::_internal_endtime() const {
  return endtime_;
}
inline double AngularAccelerationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAccelerationHistory.endTime)
  return _internal_endtime();
}
inline void AngularAccelerationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void AngularAccelerationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAccelerationHistory.endTime)
}

// -------------------------------------------------------------------

// AngularAcceleration

// required double x = 1;
inline bool AngularAcceleration::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AngularAcceleration::has_x() const {
  return _internal_has_x();
}
inline void AngularAcceleration::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AngularAcceleration::_internal_x() const {
  return x_;
}
inline double AngularAcceleration::x() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAcceleration.x)
  return _internal_x();
}
inline void AngularAcceleration::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void AngularAcceleration::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAcceleration.x)
}

// required double y = 2;
inline bool AngularAcceleration::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AngularAcceleration::has_y() const {
  return _internal_has_y();
}
inline void AngularAcceleration::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double AngularAcceleration::_internal_y() const {
  return y_;
}
inline double AngularAcceleration::y() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAcceleration.y)
  return _internal_y();
}
inline void AngularAcceleration::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void AngularAcceleration::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAcceleration.y)
}

// required double z = 3;
inline bool AngularAcceleration::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AngularAcceleration::has_z() const {
  return _internal_has_z();
}
inline void AngularAcceleration::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double AngularAcceleration::_internal_z() const {
  return z_;
}
inline double AngularAcceleration::z() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAcceleration.z)
  return _internal_z();
}
inline void AngularAcceleration::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void AngularAcceleration::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAcceleration.z)
}

// required double time = 15;
inline bool AngularAcceleration::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AngularAcceleration::has_time() const {
  return _internal_has_time();
}
inline void AngularAcceleration::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double AngularAcceleration::_internal_time() const {
  return time_;
}
inline double AngularAcceleration::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AngularAcceleration.time)
  return _internal_time();
}
inline void AngularAcceleration::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void AngularAcceleration::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AngularAcceleration.time)
}

// -------------------------------------------------------------------

// LinearAccelerationHistory

// repeated .org.copdai.core.model.LinearAcceleration linearAccelerations = 1;
inline int LinearAccelerationHistory::_internal_linearaccelerations_size() const {
  return linearaccelerations_.size();
}
inline int LinearAccelerationHistory::linearaccelerations_size() const {
  return _internal_linearaccelerations_size();
}
inline void LinearAccelerationHistory::clear_linearaccelerations() {
  linearaccelerations_.Clear();
}
inline ::org::copdai::core::model::LinearAcceleration* LinearAccelerationHistory::mutable_linearaccelerations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.LinearAccelerationHistory.linearAccelerations)
  return linearaccelerations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::LinearAcceleration >*
LinearAccelerationHistory::mutable_linearaccelerations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.LinearAccelerationHistory.linearAccelerations)
  return &linearaccelerations_;
}
inline const ::org::copdai::core::model::LinearAcceleration& LinearAccelerationHistory::_internal_linearaccelerations(int index) const {
  return linearaccelerations_.Get(index);
}
inline const ::org::copdai::core::model::LinearAcceleration& LinearAccelerationHistory::linearaccelerations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAccelerationHistory.linearAccelerations)
  return _internal_linearaccelerations(index);
}
inline ::org::copdai::core::model::LinearAcceleration* LinearAccelerationHistory::_internal_add_linearaccelerations() {
  return linearaccelerations_.Add();
}
inline ::org::copdai::core::model::LinearAcceleration* LinearAccelerationHistory::add_linearaccelerations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.LinearAccelerationHistory.linearAccelerations)
  return _internal_add_linearaccelerations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::LinearAcceleration >&
LinearAccelerationHistory::linearaccelerations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.LinearAccelerationHistory.linearAccelerations)
  return linearaccelerations_;
}

// required double sentTime = 13;
inline bool LinearAccelerationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearAccelerationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void LinearAccelerationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LinearAccelerationHistory::_internal_senttime() const {
  return senttime_;
}
inline double LinearAccelerationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAccelerationHistory.sentTime)
  return _internal_senttime();
}
inline void LinearAccelerationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void LinearAccelerationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAccelerationHistory.sentTime)
}

// required double startTime = 14;
inline bool LinearAccelerationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearAccelerationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void LinearAccelerationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LinearAccelerationHistory::_internal_starttime() const {
  return starttime_;
}
inline double LinearAccelerationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAccelerationHistory.startTime)
  return _internal_starttime();
}
inline void LinearAccelerationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void LinearAccelerationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAccelerationHistory.startTime)
}

// required double endTime = 15;
inline bool LinearAccelerationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinearAccelerationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void LinearAccelerationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LinearAccelerationHistory::_internal_endtime() const {
  return endtime_;
}
inline double LinearAccelerationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAccelerationHistory.endTime)
  return _internal_endtime();
}
inline void LinearAccelerationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void LinearAccelerationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAccelerationHistory.endTime)
}

// -------------------------------------------------------------------

// LinearAcceleration

// required double x = 1;
inline bool LinearAcceleration::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LinearAcceleration::has_x() const {
  return _internal_has_x();
}
inline void LinearAcceleration::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LinearAcceleration::_internal_x() const {
  return x_;
}
inline double LinearAcceleration::x() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAcceleration.x)
  return _internal_x();
}
inline void LinearAcceleration::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void LinearAcceleration::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAcceleration.x)
}

// required double y = 2;
inline bool LinearAcceleration::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LinearAcceleration::has_y() const {
  return _internal_has_y();
}
inline void LinearAcceleration::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LinearAcceleration::_internal_y() const {
  return y_;
}
inline double LinearAcceleration::y() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAcceleration.y)
  return _internal_y();
}
inline void LinearAcceleration::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void LinearAcceleration::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAcceleration.y)
}

// required double z = 3;
inline bool LinearAcceleration::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LinearAcceleration::has_z() const {
  return _internal_has_z();
}
inline void LinearAcceleration::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double LinearAcceleration::_internal_z() const {
  return z_;
}
inline double LinearAcceleration::z() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAcceleration.z)
  return _internal_z();
}
inline void LinearAcceleration::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void LinearAcceleration::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAcceleration.z)
}

// required double time = 15;
inline bool LinearAcceleration::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LinearAcceleration::has_time() const {
  return _internal_has_time();
}
inline void LinearAcceleration::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LinearAcceleration::_internal_time() const {
  return time_;
}
inline double LinearAcceleration::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.LinearAcceleration.time)
  return _internal_time();
}
inline void LinearAcceleration::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void LinearAcceleration::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.LinearAcceleration.time)
}

// -------------------------------------------------------------------

// OrientationHistory

// repeated .org.copdai.core.model.Orientation orientations = 1;
inline int OrientationHistory::_internal_orientations_size() const {
  return orientations_.size();
}
inline int OrientationHistory::orientations_size() const {
  return _internal_orientations_size();
}
inline void OrientationHistory::clear_orientations() {
  orientations_.Clear();
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::mutable_orientations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.OrientationHistory.orientations)
  return orientations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >*
OrientationHistory::mutable_orientations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.OrientationHistory.orientations)
  return &orientations_;
}
inline const ::org::copdai::core::model::Orientation& OrientationHistory::_internal_orientations(int index) const {
  return orientations_.Get(index);
}
inline const ::org::copdai::core::model::Orientation& OrientationHistory::orientations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.orientations)
  return _internal_orientations(index);
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::_internal_add_orientations() {
  return orientations_.Add();
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::add_orientations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.OrientationHistory.orientations)
  return _internal_add_orientations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >&
OrientationHistory::orientations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.OrientationHistory.orientations)
  return orientations_;
}

// required double sentTime = 13;
inline bool OrientationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrientationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void OrientationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double OrientationHistory::_internal_senttime() const {
  return senttime_;
}
inline double OrientationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.sentTime)
  return _internal_senttime();
}
inline void OrientationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void OrientationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.sentTime)
}

// required double startTime = 14;
inline bool OrientationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrientationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void OrientationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double OrientationHistory::_internal_starttime() const {
  return starttime_;
}
inline double OrientationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.startTime)
  return _internal_starttime();
}
inline void OrientationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void OrientationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.startTime)
}

// required double endTime = 15;
inline bool OrientationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrientationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void OrientationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OrientationHistory::_internal_endtime() const {
  return endtime_;
}
inline double OrientationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.endTime)
  return _internal_endtime();
}
inline void OrientationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void OrientationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.endTime)
}

// -------------------------------------------------------------------

// Orientation

// required double azimuth = 1;
inline bool Orientation::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Orientation::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void Orientation::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Orientation::_internal_azimuth() const {
  return azimuth_;
}
inline double Orientation::azimuth() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.azimuth)
  return _internal_azimuth();
}
inline void Orientation::_internal_set_azimuth(double value) {
  _has_bits_[0] |= 0x00000001u;
  azimuth_ = value;
}
inline void Orientation::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.azimuth)
}

// required double pitch = 2;
inline bool Orientation::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Orientation::has_pitch() const {
  return _internal_has_pitch();
}
inline void Orientation::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Orientation::_internal_pitch() const {
  return pitch_;
}
inline double Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.pitch)
  return _internal_pitch();
}
inline void Orientation::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000002u;
  pitch_ = value;
}
inline void Orientation::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.pitch)
}

// required double roll = 3;
inline bool Orientation::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Orientation::has_roll() const {
  return _internal_has_roll();
}
inline void Orientation::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Orientation::_internal_roll() const {
  return roll_;
}
inline double Orientation::roll() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.roll)
  return _internal_roll();
}
inline void Orientation::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000004u;
  roll_ = value;
}
inline void Orientation::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.roll)
}

// required double time = 15;
inline bool Orientation::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Orientation::has_time() const {
  return _internal_has_time();
}
inline void Orientation::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Orientation::_internal_time() const {
  return time_;
}
inline double Orientation::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.time)
  return _internal_time();
}
inline void Orientation::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void Orientation::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.time)
}

// -------------------------------------------------------------------

// PictureDetectedObjectsHistory

// repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
inline int PictureDetectedObjectsHistory::_internal_picturesdetectedobjects_size() const {
  return picturesdetectedobjects_.size();
}
inline int PictureDetectedObjectsHistory::picturesdetectedobjects_size() const {
  return _internal_picturesdetectedobjects_size();
}
inline void PictureDetectedObjectsHistory::clear_picturesdetectedobjects() {
  picturesdetectedobjects_.Clear();
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::mutable_picturesdetectedobjects(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return picturesdetectedobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >*
PictureDetectedObjectsHistory::mutable_picturesdetectedobjects() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return &picturesdetectedobjects_;
}
inline const ::org::copdai::core::model::PictureDetectedObjects& PictureDetectedObjectsHistory::_internal_picturesdetectedobjects(int index) const {
  return picturesdetectedobjects_.Get(index);
}
inline const ::org::copdai::core::model::PictureDetectedObjects& PictureDetectedObjectsHistory::picturesdetectedobjects(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return _internal_picturesdetectedobjects(index);
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::_internal_add_picturesdetectedobjects() {
  return picturesdetectedobjects_.Add();
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::add_picturesdetectedobjects() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return _internal_add_picturesdetectedobjects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >&
PictureDetectedObjectsHistory::picturesdetectedobjects() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return picturesdetectedobjects_;
}

// required double sentTime = 13;
inline bool PictureDetectedObjectsHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void PictureDetectedObjectsHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PictureDetectedObjectsHistory::_internal_senttime() const {
  return senttime_;
}
inline double PictureDetectedObjectsHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.sentTime)
  return _internal_senttime();
}
inline void PictureDetectedObjectsHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void PictureDetectedObjectsHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.sentTime)
}

// required double startTime = 14;
inline bool PictureDetectedObjectsHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void PictureDetectedObjectsHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PictureDetectedObjectsHistory::_internal_starttime() const {
  return starttime_;
}
inline double PictureDetectedObjectsHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.startTime)
  return _internal_starttime();
}
inline void PictureDetectedObjectsHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void PictureDetectedObjectsHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.startTime)
}

// required double endTime = 15;
inline bool PictureDetectedObjectsHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void PictureDetectedObjectsHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PictureDetectedObjectsHistory::_internal_endtime() const {
  return endtime_;
}
inline double PictureDetectedObjectsHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.endTime)
  return _internal_endtime();
}
inline void PictureDetectedObjectsHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void PictureDetectedObjectsHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.endTime)
}

// -------------------------------------------------------------------

// PictureDetectedObjects

// repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
inline int PictureDetectedObjects::_internal_picturedetectedobjects_size() const {
  return picturedetectedobjects_.size();
}
inline int PictureDetectedObjects::picturedetectedobjects_size() const {
  return _internal_picturedetectedobjects_size();
}
inline void PictureDetectedObjects::clear_picturedetectedobjects() {
  picturedetectedobjects_.Clear();
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::mutable_picturedetectedobjects(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return picturedetectedobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >*
PictureDetectedObjects::mutable_picturedetectedobjects() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return &picturedetectedobjects_;
}
inline const ::org::copdai::core::model::PictureDetectedObject& PictureDetectedObjects::_internal_picturedetectedobjects(int index) const {
  return picturedetectedobjects_.Get(index);
}
inline const ::org::copdai::core::model::PictureDetectedObject& PictureDetectedObjects::picturedetectedobjects(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return _internal_picturedetectedobjects(index);
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::_internal_add_picturedetectedobjects() {
  return picturedetectedobjects_.Add();
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::add_picturedetectedobjects() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return _internal_add_picturedetectedobjects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >&
PictureDetectedObjects::picturedetectedobjects() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return picturedetectedobjects_;
}

// required double time = 15;
inline bool PictureDetectedObjects::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObjects::has_time() const {
  return _internal_has_time();
}
inline void PictureDetectedObjects::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PictureDetectedObjects::_internal_time() const {
  return time_;
}
inline double PictureDetectedObjects::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjects.time)
  return _internal_time();
}
inline void PictureDetectedObjects::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void PictureDetectedObjects::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjects.time)
}

// -------------------------------------------------------------------

// PictureDetectedObject

// required double x1 = 1;
inline bool PictureDetectedObject::_internal_has_x1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_x1() const {
  return _internal_has_x1();
}
inline void PictureDetectedObject::clear_x1() {
  x1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PictureDetectedObject::_internal_x1() const {
  return x1_;
}
inline double PictureDetectedObject::x1() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.x1)
  return _internal_x1();
}
inline void PictureDetectedObject::_internal_set_x1(double value) {
  _has_bits_[0] |= 0x00000002u;
  x1_ = value;
}
inline void PictureDetectedObject::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.x1)
}

// required double y1 = 2;
inline bool PictureDetectedObject::_internal_has_y1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_y1() const {
  return _internal_has_y1();
}
inline void PictureDetectedObject::clear_y1() {
  y1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PictureDetectedObject::_internal_y1() const {
  return y1_;
}
inline double PictureDetectedObject::y1() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.y1)
  return _internal_y1();
}
inline void PictureDetectedObject::_internal_set_y1(double value) {
  _has_bits_[0] |= 0x00000004u;
  y1_ = value;
}
inline void PictureDetectedObject::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.y1)
}

// required double x2 = 3;
inline bool PictureDetectedObject::_internal_has_x2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_x2() const {
  return _internal_has_x2();
}
inline void PictureDetectedObject::clear_x2() {
  x2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PictureDetectedObject::_internal_x2() const {
  return x2_;
}
inline double PictureDetectedObject::x2() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.x2)
  return _internal_x2();
}
inline void PictureDetectedObject::_internal_set_x2(double value) {
  _has_bits_[0] |= 0x00000008u;
  x2_ = value;
}
inline void PictureDetectedObject::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.x2)
}

// required double y2 = 4;
inline bool PictureDetectedObject::_internal_has_y2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_y2() const {
  return _internal_has_y2();
}
inline void PictureDetectedObject::clear_y2() {
  y2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PictureDetectedObject::_internal_y2() const {
  return y2_;
}
inline double PictureDetectedObject::y2() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.y2)
  return _internal_y2();
}
inline void PictureDetectedObject::_internal_set_y2(double value) {
  _has_bits_[0] |= 0x00000010u;
  y2_ = value;
}
inline void PictureDetectedObject::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.y2)
}

// optional string label = 5;
inline bool PictureDetectedObject::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_label() const {
  return _internal_has_label();
}
inline void PictureDetectedObject::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PictureDetectedObject::label() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.label)
  return _internal_label();
}
inline void PictureDetectedObject::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.label)
}
inline std::string* PictureDetectedObject::mutable_label() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObject.label)
  return _internal_mutable_label();
}
inline const std::string& PictureDetectedObject::_internal_label() const {
  return label_.Get();
}
inline void PictureDetectedObject::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PictureDetectedObject::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.PictureDetectedObject.label)
}
inline void PictureDetectedObject::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.PictureDetectedObject.label)
}
inline void PictureDetectedObject::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.PictureDetectedObject.label)
}
inline std::string* PictureDetectedObject::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PictureDetectedObject::release_label() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.PictureDetectedObject.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PictureDetectedObject::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.PictureDetectedObject.label)
}

// optional double confidence = 6;
inline bool PictureDetectedObject::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_confidence() const {
  return _internal_has_confidence();
}
inline void PictureDetectedObject::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PictureDetectedObject::_internal_confidence() const {
  return confidence_;
}
inline double PictureDetectedObject::confidence() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.confidence)
  return _internal_confidence();
}
inline void PictureDetectedObject::_internal_set_confidence(double value) {
  _has_bits_[0] |= 0x00000020u;
  confidence_ = value;
}
inline void PictureDetectedObject::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensors_5fdata_5fmodel_2eproto
