// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directory_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_directory_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_directory_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_directory_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_directory_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_directory_5fmodel_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class AgentService;
class AgentServiceDefaultTypeInternal;
extern AgentServiceDefaultTypeInternal _AgentService_default_instance_;
class WhitePageEntry;
class WhitePageEntryDefaultTypeInternal;
extern WhitePageEntryDefaultTypeInternal _WhitePageEntry_default_instance_;
class WhitePages;
class WhitePagesDefaultTypeInternal;
extern WhitePagesDefaultTypeInternal _WhitePages_default_instance_;
class YellowPages;
class YellowPagesDefaultTypeInternal;
extern YellowPagesDefaultTypeInternal _YellowPages_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::copdai::core::model::AgentService* Arena::CreateMaybeMessage<::org::copdai::core::model::AgentService>(Arena*);
template<> ::org::copdai::core::model::WhitePageEntry* Arena::CreateMaybeMessage<::org::copdai::core::model::WhitePageEntry>(Arena*);
template<> ::org::copdai::core::model::WhitePages* Arena::CreateMaybeMessage<::org::copdai::core::model::WhitePages>(Arena*);
template<> ::org::copdai::core::model::YellowPages* Arena::CreateMaybeMessage<::org::copdai::core::model::YellowPages>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace copdai {
namespace core {
namespace model {

enum ServiceConsumptionPattern : int {
  REQUEST_REPLAY = 0,
  PUBLISH_SUBSCRIBE = 1,
  PUSH_PULL = 2,
  EXCLUSIVE_PAIR = 3
};
bool ServiceConsumptionPattern_IsValid(int value);
constexpr ServiceConsumptionPattern ServiceConsumptionPattern_MIN = REQUEST_REPLAY;
constexpr ServiceConsumptionPattern ServiceConsumptionPattern_MAX = EXCLUSIVE_PAIR;
constexpr int ServiceConsumptionPattern_ARRAYSIZE = ServiceConsumptionPattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceConsumptionPattern_descriptor();
template<typename T>
inline const std::string& ServiceConsumptionPattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceConsumptionPattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceConsumptionPattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceConsumptionPattern_descriptor(), enum_t_value);
}
inline bool ServiceConsumptionPattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceConsumptionPattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceConsumptionPattern>(
    ServiceConsumptionPattern_descriptor(), name, value);
}
// ===================================================================

class WhitePages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.WhitePages) */ {
 public:
  inline WhitePages() : WhitePages(nullptr) {}
  virtual ~WhitePages();

  WhitePages(const WhitePages& from);
  WhitePages(WhitePages&& from) noexcept
    : WhitePages() {
    *this = ::std::move(from);
  }

  inline WhitePages& operator=(const WhitePages& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhitePages& operator=(WhitePages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhitePages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhitePages* internal_default_instance() {
    return reinterpret_cast<const WhitePages*>(
               &_WhitePages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WhitePages& a, WhitePages& b) {
    a.Swap(&b);
  }
  inline void Swap(WhitePages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhitePages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhitePages* New() const final {
    return CreateMaybeMessage<WhitePages>(nullptr);
  }

  WhitePages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhitePages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhitePages& from);
  void MergeFrom(const WhitePages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhitePages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.WhitePages";
  }
  protected:
  explicit WhitePages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_directory_5fmodel_2eproto);
    return ::descriptor_table_directory_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kLastUpdateFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.WhitePageEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::org::copdai::core::model::WhitePageEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::WhitePageEntry >*
      mutable_entries();
  private:
  const ::org::copdai::core::model::WhitePageEntry& _internal_entries(int index) const;
  ::org::copdai::core::model::WhitePageEntry* _internal_add_entries();
  public:
  const ::org::copdai::core::model::WhitePageEntry& entries(int index) const;
  ::org::copdai::core::model::WhitePageEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::WhitePageEntry >&
      entries() const;

  // required double lastUpdate = 15;
  bool has_lastupdate() const;
  private:
  bool _internal_has_lastupdate() const;
  public:
  void clear_lastupdate();
  double lastupdate() const;
  void set_lastupdate(double value);
  private:
  double _internal_lastupdate() const;
  void _internal_set_lastupdate(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.WhitePages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::WhitePageEntry > entries_;
  double lastupdate_;
  friend struct ::TableStruct_directory_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class WhitePageEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.WhitePageEntry) */ {
 public:
  inline WhitePageEntry() : WhitePageEntry(nullptr) {}
  virtual ~WhitePageEntry();

  WhitePageEntry(const WhitePageEntry& from);
  WhitePageEntry(WhitePageEntry&& from) noexcept
    : WhitePageEntry() {
    *this = ::std::move(from);
  }

  inline WhitePageEntry& operator=(const WhitePageEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhitePageEntry& operator=(WhitePageEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhitePageEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhitePageEntry* internal_default_instance() {
    return reinterpret_cast<const WhitePageEntry*>(
               &_WhitePageEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WhitePageEntry& a, WhitePageEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(WhitePageEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhitePageEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhitePageEntry* New() const final {
    return CreateMaybeMessage<WhitePageEntry>(nullptr);
  }

  WhitePageEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhitePageEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhitePageEntry& from);
  void MergeFrom(const WhitePageEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhitePageEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.WhitePageEntry";
  }
  protected:
  explicit WhitePageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_directory_5fmodel_2eproto);
    return ::descriptor_table_directory_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 2,
    kAidFieldNumber = 1,
    kTimeFieldNumber = 15,
  };
  // repeated string addresses = 2;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // required string aid = 1;
  bool has_aid() const;
  private:
  bool _internal_has_aid() const;
  public:
  void clear_aid();
  const std::string& aid() const;
  void set_aid(const std::string& value);
  void set_aid(std::string&& value);
  void set_aid(const char* value);
  void set_aid(const char* value, size_t size);
  std::string* mutable_aid();
  std::string* release_aid();
  void set_allocated_aid(std::string* aid);
  private:
  const std::string& _internal_aid() const;
  void _internal_set_aid(const std::string& value);
  std::string* _internal_mutable_aid();
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.WhitePageEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
  double time_;
  friend struct ::TableStruct_directory_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class AgentService PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.AgentService) */ {
 public:
  inline AgentService() : AgentService(nullptr) {}
  virtual ~AgentService();

  AgentService(const AgentService& from);
  AgentService(AgentService&& from) noexcept
    : AgentService() {
    *this = ::std::move(from);
  }

  inline AgentService& operator=(const AgentService& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentService& operator=(AgentService&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentService* internal_default_instance() {
    return reinterpret_cast<const AgentService*>(
               &_AgentService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgentService& a, AgentService& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentService* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentService* New() const final {
    return CreateMaybeMessage<AgentService>(nullptr);
  }

  AgentService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentService& from);
  void MergeFrom(const AgentService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.AgentService";
  }
  protected:
  explicit AgentService(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_directory_5fmodel_2eproto);
    return ::descriptor_table_directory_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kInputTypeFieldNumber = 4,
    kOutputTyeFieldNumber = 5,
    kPatternFieldNumber = 8,
  };
  // required string aid = 1;
  bool has_aid() const;
  private:
  bool _internal_has_aid() const;
  public:
  void clear_aid();
  const std::string& aid() const;
  void set_aid(const std::string& value);
  void set_aid(std::string&& value);
  void set_aid(const char* value);
  void set_aid(const char* value, size_t size);
  std::string* mutable_aid();
  std::string* release_aid();
  void set_allocated_aid(std::string* aid);
  private:
  const std::string& _internal_aid() const;
  void _internal_set_aid(const std::string& value);
  std::string* _internal_mutable_aid();
  public:

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string inputType = 4;
  bool has_inputtype() const;
  private:
  bool _internal_has_inputtype() const;
  public:
  void clear_inputtype();
  const std::string& inputtype() const;
  void set_inputtype(const std::string& value);
  void set_inputtype(std::string&& value);
  void set_inputtype(const char* value);
  void set_inputtype(const char* value, size_t size);
  std::string* mutable_inputtype();
  std::string* release_inputtype();
  void set_allocated_inputtype(std::string* inputtype);
  private:
  const std::string& _internal_inputtype() const;
  void _internal_set_inputtype(const std::string& value);
  std::string* _internal_mutable_inputtype();
  public:

  // optional string outputTye = 5;
  bool has_outputtye() const;
  private:
  bool _internal_has_outputtye() const;
  public:
  void clear_outputtye();
  const std::string& outputtye() const;
  void set_outputtye(const std::string& value);
  void set_outputtye(std::string&& value);
  void set_outputtye(const char* value);
  void set_outputtye(const char* value, size_t size);
  std::string* mutable_outputtye();
  std::string* release_outputtye();
  void set_allocated_outputtye(std::string* outputtye);
  private:
  const std::string& _internal_outputtye() const;
  void _internal_set_outputtye(const std::string& value);
  std::string* _internal_mutable_outputtye();
  public:

  // required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  ::org::copdai::core::model::ServiceConsumptionPattern pattern() const;
  void set_pattern(::org::copdai::core::model::ServiceConsumptionPattern value);
  private:
  ::org::copdai::core::model::ServiceConsumptionPattern _internal_pattern() const;
  void _internal_set_pattern(::org::copdai::core::model::ServiceConsumptionPattern value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.AgentService)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputtye_;
  int pattern_;
  friend struct ::TableStruct_directory_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class YellowPages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.YellowPages) */ {
 public:
  inline YellowPages() : YellowPages(nullptr) {}
  virtual ~YellowPages();

  YellowPages(const YellowPages& from);
  YellowPages(YellowPages&& from) noexcept
    : YellowPages() {
    *this = ::std::move(from);
  }

  inline YellowPages& operator=(const YellowPages& from) {
    CopyFrom(from);
    return *this;
  }
  inline YellowPages& operator=(YellowPages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const YellowPages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YellowPages* internal_default_instance() {
    return reinterpret_cast<const YellowPages*>(
               &_YellowPages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(YellowPages& a, YellowPages& b) {
    a.Swap(&b);
  }
  inline void Swap(YellowPages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YellowPages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline YellowPages* New() const final {
    return CreateMaybeMessage<YellowPages>(nullptr);
  }

  YellowPages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<YellowPages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const YellowPages& from);
  void MergeFrom(const YellowPages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YellowPages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.YellowPages";
  }
  protected:
  explicit YellowPages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_directory_5fmodel_2eproto);
    return ::descriptor_table_directory_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentServicesFieldNumber = 1,
    kLastUpdateFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.AgentService agentServices = 1;
  int agentservices_size() const;
  private:
  int _internal_agentservices_size() const;
  public:
  void clear_agentservices();
  ::org::copdai::core::model::AgentService* mutable_agentservices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AgentService >*
      mutable_agentservices();
  private:
  const ::org::copdai::core::model::AgentService& _internal_agentservices(int index) const;
  ::org::copdai::core::model::AgentService* _internal_add_agentservices();
  public:
  const ::org::copdai::core::model::AgentService& agentservices(int index) const;
  ::org::copdai::core::model::AgentService* add_agentservices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AgentService >&
      agentservices() const;

  // required double lastUpdate = 15;
  bool has_lastupdate() const;
  private:
  bool _internal_has_lastupdate() const;
  public:
  void clear_lastupdate();
  double lastupdate() const;
  void set_lastupdate(double value);
  private:
  double _internal_lastupdate() const;
  void _internal_set_lastupdate(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.YellowPages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AgentService > agentservices_;
  double lastupdate_;
  friend struct ::TableStruct_directory_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WhitePages

// repeated .org.copdai.core.model.WhitePageEntry entries = 2;
inline int WhitePages::_internal_entries_size() const {
  return entries_.size();
}
inline int WhitePages::entries_size() const {
  return _internal_entries_size();
}
inline void WhitePages::clear_entries() {
  entries_.Clear();
}
inline ::org::copdai::core::model::WhitePageEntry* WhitePages::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.WhitePages.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::WhitePageEntry >*
WhitePages::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.WhitePages.entries)
  return &entries_;
}
inline const ::org::copdai::core::model::WhitePageEntry& WhitePages::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::org::copdai::core::model::WhitePageEntry& WhitePages::entries(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.WhitePages.entries)
  return _internal_entries(index);
}
inline ::org::copdai::core::model::WhitePageEntry* WhitePages::_internal_add_entries() {
  return entries_.Add();
}
inline ::org::copdai::core::model::WhitePageEntry* WhitePages::add_entries() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.WhitePages.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::WhitePageEntry >&
WhitePages::entries() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.WhitePages.entries)
  return entries_;
}

// required double lastUpdate = 15;
inline bool WhitePages::_internal_has_lastupdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WhitePages::has_lastupdate() const {
  return _internal_has_lastupdate();
}
inline void WhitePages::clear_lastupdate() {
  lastupdate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double WhitePages::_internal_lastupdate() const {
  return lastupdate_;
}
inline double WhitePages::lastupdate() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.WhitePages.lastUpdate)
  return _internal_lastupdate();
}
inline void WhitePages::_internal_set_lastupdate(double value) {
  _has_bits_[0] |= 0x00000001u;
  lastupdate_ = value;
}
inline void WhitePages::set_lastupdate(double value) {
  _internal_set_lastupdate(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.WhitePages.lastUpdate)
}

// -------------------------------------------------------------------

// WhitePageEntry

// required string aid = 1;
inline bool WhitePageEntry::_internal_has_aid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WhitePageEntry::has_aid() const {
  return _internal_has_aid();
}
inline void WhitePageEntry::clear_aid() {
  aid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WhitePageEntry::aid() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.WhitePageEntry.aid)
  return _internal_aid();
}
inline void WhitePageEntry::set_aid(const std::string& value) {
  _internal_set_aid(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.WhitePageEntry.aid)
}
inline std::string* WhitePageEntry::mutable_aid() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.WhitePageEntry.aid)
  return _internal_mutable_aid();
}
inline const std::string& WhitePageEntry::_internal_aid() const {
  return aid_.Get();
}
inline void WhitePageEntry::_internal_set_aid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WhitePageEntry::set_aid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.WhitePageEntry.aid)
}
inline void WhitePageEntry::set_aid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.WhitePageEntry.aid)
}
inline void WhitePageEntry::set_aid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.WhitePageEntry.aid)
}
inline std::string* WhitePageEntry::_internal_mutable_aid() {
  _has_bits_[0] |= 0x00000001u;
  return aid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WhitePageEntry::release_aid() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.WhitePageEntry.aid)
  if (!_internal_has_aid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return aid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WhitePageEntry::set_allocated_aid(std::string* aid) {
  if (aid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  aid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.WhitePageEntry.aid)
}

// repeated string addresses = 2;
inline int WhitePageEntry::_internal_addresses_size() const {
  return addresses_.size();
}
inline int WhitePageEntry::addresses_size() const {
  return _internal_addresses_size();
}
inline void WhitePageEntry::clear_addresses() {
  addresses_.Clear();
}
inline std::string* WhitePageEntry::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:org.copdai.core.model.WhitePageEntry.addresses)
  return _internal_add_addresses();
}
inline const std::string& WhitePageEntry::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& WhitePageEntry::addresses(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.WhitePageEntry.addresses)
  return _internal_addresses(index);
}
inline std::string* WhitePageEntry::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.WhitePageEntry.addresses)
  return addresses_.Mutable(index);
}
inline void WhitePageEntry::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:org.copdai.core.model.WhitePageEntry.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void WhitePageEntry::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:org.copdai.core.model.WhitePageEntry.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void WhitePageEntry::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.WhitePageEntry.addresses)
}
inline void WhitePageEntry::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.WhitePageEntry.addresses)
}
inline std::string* WhitePageEntry::_internal_add_addresses() {
  return addresses_.Add();
}
inline void WhitePageEntry::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.copdai.core.model.WhitePageEntry.addresses)
}
inline void WhitePageEntry::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.copdai.core.model.WhitePageEntry.addresses)
}
inline void WhitePageEntry::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.copdai.core.model.WhitePageEntry.addresses)
}
inline void WhitePageEntry::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.copdai.core.model.WhitePageEntry.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WhitePageEntry::addresses() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.WhitePageEntry.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WhitePageEntry::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.WhitePageEntry.addresses)
  return &addresses_;
}

// required double time = 15;
inline bool WhitePageEntry::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WhitePageEntry::has_time() const {
  return _internal_has_time();
}
inline void WhitePageEntry::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double WhitePageEntry::_internal_time() const {
  return time_;
}
inline double WhitePageEntry::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.WhitePageEntry.time)
  return _internal_time();
}
inline void WhitePageEntry::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void WhitePageEntry::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.WhitePageEntry.time)
}

// -------------------------------------------------------------------

// AgentService

// required string aid = 1;
inline bool AgentService::_internal_has_aid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AgentService::has_aid() const {
  return _internal_has_aid();
}
inline void AgentService::clear_aid() {
  aid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AgentService::aid() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.aid)
  return _internal_aid();
}
inline void AgentService::set_aid(const std::string& value) {
  _internal_set_aid(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.aid)
}
inline std::string* AgentService::mutable_aid() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AgentService.aid)
  return _internal_mutable_aid();
}
inline const std::string& AgentService::_internal_aid() const {
  return aid_.Get();
}
inline void AgentService::_internal_set_aid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentService::set_aid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.AgentService.aid)
}
inline void AgentService::set_aid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.AgentService.aid)
}
inline void AgentService::set_aid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  aid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.AgentService.aid)
}
inline std::string* AgentService::_internal_mutable_aid() {
  _has_bits_[0] |= 0x00000001u;
  return aid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentService::release_aid() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.AgentService.aid)
  if (!_internal_has_aid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return aid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentService::set_allocated_aid(std::string* aid) {
  if (aid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  aid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.AgentService.aid)
}

// required string name = 2;
inline bool AgentService::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AgentService::has_name() const {
  return _internal_has_name();
}
inline void AgentService::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AgentService::name() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.name)
  return _internal_name();
}
inline void AgentService::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.name)
}
inline std::string* AgentService::mutable_name() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AgentService.name)
  return _internal_mutable_name();
}
inline const std::string& AgentService::_internal_name() const {
  return name_.Get();
}
inline void AgentService::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentService::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.AgentService.name)
}
inline void AgentService::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.AgentService.name)
}
inline void AgentService::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.AgentService.name)
}
inline std::string* AgentService::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentService::release_name() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.AgentService.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentService::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.AgentService.name)
}

// optional string type = 3;
inline bool AgentService::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AgentService::has_type() const {
  return _internal_has_type();
}
inline void AgentService::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AgentService::type() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.type)
  return _internal_type();
}
inline void AgentService::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.type)
}
inline std::string* AgentService::mutable_type() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AgentService.type)
  return _internal_mutable_type();
}
inline const std::string& AgentService::_internal_type() const {
  return type_.Get();
}
inline void AgentService::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentService::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.AgentService.type)
}
inline void AgentService::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.AgentService.type)
}
inline void AgentService::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.AgentService.type)
}
inline std::string* AgentService::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentService::release_type() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.AgentService.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentService::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.AgentService.type)
}

// optional string inputType = 4;
inline bool AgentService::_internal_has_inputtype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AgentService::has_inputtype() const {
  return _internal_has_inputtype();
}
inline void AgentService::clear_inputtype() {
  inputtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AgentService::inputtype() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.inputType)
  return _internal_inputtype();
}
inline void AgentService::set_inputtype(const std::string& value) {
  _internal_set_inputtype(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.inputType)
}
inline std::string* AgentService::mutable_inputtype() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AgentService.inputType)
  return _internal_mutable_inputtype();
}
inline const std::string& AgentService::_internal_inputtype() const {
  return inputtype_.Get();
}
inline void AgentService::_internal_set_inputtype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  inputtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentService::set_inputtype(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  inputtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.AgentService.inputType)
}
inline void AgentService::set_inputtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  inputtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.AgentService.inputType)
}
inline void AgentService::set_inputtype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  inputtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.AgentService.inputType)
}
inline std::string* AgentService::_internal_mutable_inputtype() {
  _has_bits_[0] |= 0x00000008u;
  return inputtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentService::release_inputtype() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.AgentService.inputType)
  if (!_internal_has_inputtype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return inputtype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentService::set_allocated_inputtype(std::string* inputtype) {
  if (inputtype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  inputtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.AgentService.inputType)
}

// optional string outputTye = 5;
inline bool AgentService::_internal_has_outputtye() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AgentService::has_outputtye() const {
  return _internal_has_outputtye();
}
inline void AgentService::clear_outputtye() {
  outputtye_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AgentService::outputtye() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.outputTye)
  return _internal_outputtye();
}
inline void AgentService::set_outputtye(const std::string& value) {
  _internal_set_outputtye(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.outputTye)
}
inline std::string* AgentService::mutable_outputtye() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.AgentService.outputTye)
  return _internal_mutable_outputtye();
}
inline const std::string& AgentService::_internal_outputtye() const {
  return outputtye_.Get();
}
inline void AgentService::_internal_set_outputtye(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  outputtye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentService::set_outputtye(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  outputtye_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.AgentService.outputTye)
}
inline void AgentService::set_outputtye(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  outputtye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.AgentService.outputTye)
}
inline void AgentService::set_outputtye(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  outputtye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.AgentService.outputTye)
}
inline std::string* AgentService::_internal_mutable_outputtye() {
  _has_bits_[0] |= 0x00000010u;
  return outputtye_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentService::release_outputtye() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.AgentService.outputTye)
  if (!_internal_has_outputtye()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return outputtye_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentService::set_allocated_outputtye(std::string* outputtye) {
  if (outputtye != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  outputtye_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputtye,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.AgentService.outputTye)
}

// required .org.copdai.core.model.ServiceConsumptionPattern pattern = 8;
inline bool AgentService::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AgentService::has_pattern() const {
  return _internal_has_pattern();
}
inline void AgentService::clear_pattern() {
  pattern_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::org::copdai::core::model::ServiceConsumptionPattern AgentService::_internal_pattern() const {
  return static_cast< ::org::copdai::core::model::ServiceConsumptionPattern >(pattern_);
}
inline ::org::copdai::core::model::ServiceConsumptionPattern AgentService::pattern() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.AgentService.pattern)
  return _internal_pattern();
}
inline void AgentService::_internal_set_pattern(::org::copdai::core::model::ServiceConsumptionPattern value) {
  assert(::org::copdai::core::model::ServiceConsumptionPattern_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  pattern_ = value;
}
inline void AgentService::set_pattern(::org::copdai::core::model::ServiceConsumptionPattern value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.AgentService.pattern)
}

// -------------------------------------------------------------------

// YellowPages

// repeated .org.copdai.core.model.AgentService agentServices = 1;
inline int YellowPages::_internal_agentservices_size() const {
  return agentservices_.size();
}
inline int YellowPages::agentservices_size() const {
  return _internal_agentservices_size();
}
inline void YellowPages::clear_agentservices() {
  agentservices_.Clear();
}
inline ::org::copdai::core::model::AgentService* YellowPages::mutable_agentservices(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.YellowPages.agentServices)
  return agentservices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AgentService >*
YellowPages::mutable_agentservices() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.YellowPages.agentServices)
  return &agentservices_;
}
inline const ::org::copdai::core::model::AgentService& YellowPages::_internal_agentservices(int index) const {
  return agentservices_.Get(index);
}
inline const ::org::copdai::core::model::AgentService& YellowPages::agentservices(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.YellowPages.agentServices)
  return _internal_agentservices(index);
}
inline ::org::copdai::core::model::AgentService* YellowPages::_internal_add_agentservices() {
  return agentservices_.Add();
}
inline ::org::copdai::core::model::AgentService* YellowPages::add_agentservices() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.YellowPages.agentServices)
  return _internal_add_agentservices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::AgentService >&
YellowPages::agentservices() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.YellowPages.agentServices)
  return agentservices_;
}

// required double lastUpdate = 15;
inline bool YellowPages::_internal_has_lastupdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool YellowPages::has_lastupdate() const {
  return _internal_has_lastupdate();
}
inline void YellowPages::clear_lastupdate() {
  lastupdate_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double YellowPages::_internal_lastupdate() const {
  return lastupdate_;
}
inline double YellowPages::lastupdate() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.YellowPages.lastUpdate)
  return _internal_lastupdate();
}
inline void YellowPages::_internal_set_lastupdate(double value) {
  _has_bits_[0] |= 0x00000001u;
  lastupdate_ = value;
}
inline void YellowPages::set_lastupdate(double value) {
  _internal_set_lastupdate(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.YellowPages.lastUpdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::org::copdai::core::model::ServiceConsumptionPattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::org::copdai::core::model::ServiceConsumptionPattern>() {
  return ::org::copdai::core::model::ServiceConsumptionPattern_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_directory_5fmodel_2eproto
