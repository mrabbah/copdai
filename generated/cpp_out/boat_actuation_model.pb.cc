// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: boat_actuation_model.proto

#include "boat_actuation_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_boat_5factuation_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class BoatModel1CommandHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoatModel1CommandHistory> _instance;
} _BoatModel1CommandHistory_default_instance_;
class BoatModel1CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoatModel1Command> _instance;
} _BoatModel1Command_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
static void InitDefaultsscc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_BoatModel1Command_default_instance_;
    new (ptr) ::org::copdai::core::model::BoatModel1Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::BoatModel1Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_BoatModel1CommandHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::BoatModel1CommandHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::BoatModel1CommandHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto}, {
      &scc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_boat_5factuation_5fmodel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_boat_5factuation_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_boat_5factuation_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_boat_5factuation_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, commands_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1CommandHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1Command, motorpower_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1Command, torque_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::BoatModel1Command, time_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::org::copdai::core::model::BoatModel1CommandHistory)},
  { 13, 21, sizeof(::org::copdai::core::model::BoatModel1Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_BoatModel1CommandHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_BoatModel1Command_default_instance_),
};

const char descriptor_table_protodef_boat_5factuation_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032boat_actuation_model.proto\022\025org.copdai"
  ".core.model\"\214\001\n\030BoatModel1CommandHistory"
  "\022:\n\010commands\030\001 \003(\0132(.org.copdai.core.mod"
  "el.BoatModel1Command\022\020\n\010sentTime\030\r \002(\001\022\021"
  "\n\tstartTime\030\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"E\n\021Bo"
  "atModel1Command\022\022\n\nmotorPower\030\001 \002(\001\022\016\n\006t"
  "orque\030\002 \002(\001\022\014\n\004time\030\017 \002(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_boat_5factuation_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_boat_5factuation_5fmodel_2eproto_sccs[2] = {
  &scc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto.base,
  &scc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_boat_5factuation_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_boat_5factuation_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_boat_5factuation_5fmodel_2eproto, "boat_actuation_model.proto", 265,
  &descriptor_table_boat_5factuation_5fmodel_2eproto_once, descriptor_table_boat_5factuation_5fmodel_2eproto_sccs, descriptor_table_boat_5factuation_5fmodel_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_boat_5factuation_5fmodel_2eproto::offsets,
  file_level_metadata_boat_5factuation_5fmodel_2eproto, 2, file_level_enum_descriptors_boat_5factuation_5fmodel_2eproto, file_level_service_descriptors_boat_5factuation_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_boat_5factuation_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_boat_5factuation_5fmodel_2eproto)), true);
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

void BoatModel1CommandHistory::InitAsDefaultInstance() {
}
class BoatModel1CommandHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<BoatModel1CommandHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BoatModel1CommandHistory::BoatModel1CommandHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.BoatModel1CommandHistory)
}
BoatModel1CommandHistory::BoatModel1CommandHistory(const BoatModel1CommandHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.BoatModel1CommandHistory)
}

void BoatModel1CommandHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

BoatModel1CommandHistory::~BoatModel1CommandHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.BoatModel1CommandHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoatModel1CommandHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoatModel1CommandHistory::ArenaDtor(void* object) {
  BoatModel1CommandHistory* _this = reinterpret_cast< BoatModel1CommandHistory* >(object);
  (void)_this;
}
void BoatModel1CommandHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoatModel1CommandHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoatModel1CommandHistory& BoatModel1CommandHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoatModel1CommandHistory_boat_5factuation_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void BoatModel1CommandHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.BoatModel1CommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoatModel1CommandHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.BoatModel1Command commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoatModel1CommandHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.BoatModel1CommandHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.BoatModel1Command commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.BoatModel1CommandHistory)
  return target;
}

size_t BoatModel1CommandHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.BoatModel1CommandHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BoatModel1CommandHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.BoatModel1CommandHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.BoatModel1Command commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoatModel1CommandHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.BoatModel1CommandHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const BoatModel1CommandHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoatModel1CommandHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.BoatModel1CommandHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.BoatModel1CommandHistory)
    MergeFrom(*source);
  }
}

void BoatModel1CommandHistory::MergeFrom(const BoatModel1CommandHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.BoatModel1CommandHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoatModel1CommandHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.BoatModel1CommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoatModel1CommandHistory::CopyFrom(const BoatModel1CommandHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.BoatModel1CommandHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoatModel1CommandHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(commands_)) return false;
  return true;
}

void BoatModel1CommandHistory::InternalSwap(BoatModel1CommandHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  commands_.InternalSwap(&other->commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoatModel1CommandHistory, endtime_)
      + sizeof(BoatModel1CommandHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(BoatModel1CommandHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoatModel1CommandHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoatModel1Command::InitAsDefaultInstance() {
}
class BoatModel1Command::_Internal {
 public:
  using HasBits = decltype(std::declval<BoatModel1Command>()._has_bits_);
  static void set_has_motorpower(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BoatModel1Command::BoatModel1Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.BoatModel1Command)
}
BoatModel1Command::BoatModel1Command(const BoatModel1Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&motorpower_, &from.motorpower_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&motorpower_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.BoatModel1Command)
}

void BoatModel1Command::SharedCtor() {
  ::memset(&motorpower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&motorpower_)) + sizeof(time_));
}

BoatModel1Command::~BoatModel1Command() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.BoatModel1Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoatModel1Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoatModel1Command::ArenaDtor(void* object) {
  BoatModel1Command* _this = reinterpret_cast< BoatModel1Command* >(object);
  (void)_this;
}
void BoatModel1Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoatModel1Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoatModel1Command& BoatModel1Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoatModel1Command_boat_5factuation_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void BoatModel1Command::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.BoatModel1Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&motorpower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&motorpower_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoatModel1Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double motorPower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_motorpower(&has_bits);
          motorpower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_torque(&has_bits);
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoatModel1Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.BoatModel1Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double motorPower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_motorpower(), target);
  }

  // required double torque = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_torque(), target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.BoatModel1Command)
  return target;
}

size_t BoatModel1Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.BoatModel1Command)
  size_t total_size = 0;

  if (_internal_has_motorpower()) {
    // required double motorPower = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_torque()) {
    // required double torque = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BoatModel1Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.BoatModel1Command)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double motorPower = 1;
    total_size += 1 + 8;

    // required double torque = 2;
    total_size += 1 + 8;

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoatModel1Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.BoatModel1Command)
  GOOGLE_DCHECK_NE(&from, this);
  const BoatModel1Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoatModel1Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.BoatModel1Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.BoatModel1Command)
    MergeFrom(*source);
  }
}

void BoatModel1Command::MergeFrom(const BoatModel1Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.BoatModel1Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      motorpower_ = from.motorpower_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_ = from.torque_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoatModel1Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.BoatModel1Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoatModel1Command::CopyFrom(const BoatModel1Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.BoatModel1Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoatModel1Command::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BoatModel1Command::InternalSwap(BoatModel1Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoatModel1Command, time_)
      + sizeof(BoatModel1Command::time_)
      - PROTOBUF_FIELD_OFFSET(BoatModel1Command, motorpower_)>(
          reinterpret_cast<char*>(&motorpower_),
          reinterpret_cast<char*>(&other->motorpower_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoatModel1Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::BoatModel1CommandHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::BoatModel1CommandHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::BoatModel1CommandHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::BoatModel1Command* Arena::CreateMaybeMessage< ::org::copdai::core::model::BoatModel1Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::BoatModel1Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
