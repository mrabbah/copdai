// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PictureObjectsDetection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PictureObjectsDetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PictureObjectsDetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PictureObjectsDetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PictureObjectsDetection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PictureObjectsDetection_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class PictureDetectedObject;
class PictureDetectedObjectDefaultTypeInternal;
extern PictureDetectedObjectDefaultTypeInternal _PictureDetectedObject_default_instance_;
class PictureDetectedObjects;
class PictureDetectedObjectsDefaultTypeInternal;
extern PictureDetectedObjectsDefaultTypeInternal _PictureDetectedObjects_default_instance_;
class PictureDetectedObjectsHistory;
class PictureDetectedObjectsHistoryDefaultTypeInternal;
extern PictureDetectedObjectsHistoryDefaultTypeInternal _PictureDetectedObjectsHistory_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::copdai::core::model::PictureDetectedObject* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObject>(Arena*);
template<> ::org::copdai::core::model::PictureDetectedObjects* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObjects>(Arena*);
template<> ::org::copdai::core::model::PictureDetectedObjectsHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::PictureDetectedObjectsHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

class PictureDetectedObjectsHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObjectsHistory) */ {
 public:
  inline PictureDetectedObjectsHistory() : PictureDetectedObjectsHistory(nullptr) {}
  virtual ~PictureDetectedObjectsHistory();

  PictureDetectedObjectsHistory(const PictureDetectedObjectsHistory& from);
  PictureDetectedObjectsHistory(PictureDetectedObjectsHistory&& from) noexcept
    : PictureDetectedObjectsHistory() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObjectsHistory& operator=(const PictureDetectedObjectsHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObjectsHistory& operator=(PictureDetectedObjectsHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObjectsHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObjectsHistory* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObjectsHistory*>(
               &_PictureDetectedObjectsHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PictureDetectedObjectsHistory& a, PictureDetectedObjectsHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObjectsHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObjectsHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObjectsHistory* New() const final {
    return CreateMaybeMessage<PictureDetectedObjectsHistory>(nullptr);
  }

  PictureDetectedObjectsHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObjectsHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObjectsHistory& from);
  void MergeFrom(const PictureDetectedObjectsHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObjectsHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObjectsHistory";
  }
  protected:
  explicit PictureDetectedObjectsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PictureObjectsDetection_2eproto);
    return ::descriptor_table_PictureObjectsDetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicturesDetectedObjectsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  int picturesdetectedobjects_size() const;
  private:
  int _internal_picturesdetectedobjects_size() const;
  public:
  void clear_picturesdetectedobjects();
  ::org::copdai::core::model::PictureDetectedObjects* mutable_picturesdetectedobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >*
      mutable_picturesdetectedobjects();
  private:
  const ::org::copdai::core::model::PictureDetectedObjects& _internal_picturesdetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObjects* _internal_add_picturesdetectedobjects();
  public:
  const ::org::copdai::core::model::PictureDetectedObjects& picturesdetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObjects* add_picturesdetectedobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >&
      picturesdetectedobjects() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObjectsHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects > picturesdetectedobjects_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_PictureObjectsDetection_2eproto;
};
// -------------------------------------------------------------------

class PictureDetectedObjects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObjects) */ {
 public:
  inline PictureDetectedObjects() : PictureDetectedObjects(nullptr) {}
  virtual ~PictureDetectedObjects();

  PictureDetectedObjects(const PictureDetectedObjects& from);
  PictureDetectedObjects(PictureDetectedObjects&& from) noexcept
    : PictureDetectedObjects() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObjects& operator=(const PictureDetectedObjects& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObjects& operator=(PictureDetectedObjects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObjects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObjects* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObjects*>(
               &_PictureDetectedObjects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PictureDetectedObjects& a, PictureDetectedObjects& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObjects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObjects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObjects* New() const final {
    return CreateMaybeMessage<PictureDetectedObjects>(nullptr);
  }

  PictureDetectedObjects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObjects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObjects& from);
  void MergeFrom(const PictureDetectedObjects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObjects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObjects";
  }
  protected:
  explicit PictureDetectedObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PictureObjectsDetection_2eproto);
    return ::descriptor_table_PictureObjectsDetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPictureDetectedObjectsFieldNumber = 1,
    kTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  int picturedetectedobjects_size() const;
  private:
  int _internal_picturedetectedobjects_size() const;
  public:
  void clear_picturedetectedobjects();
  ::org::copdai::core::model::PictureDetectedObject* mutable_picturedetectedobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >*
      mutable_picturedetectedobjects();
  private:
  const ::org::copdai::core::model::PictureDetectedObject& _internal_picturedetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObject* _internal_add_picturedetectedobjects();
  public:
  const ::org::copdai::core::model::PictureDetectedObject& picturedetectedobjects(int index) const;
  ::org::copdai::core::model::PictureDetectedObject* add_picturedetectedobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >&
      picturedetectedobjects() const;

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObjects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject > picturedetectedobjects_;
  double time_;
  friend struct ::TableStruct_PictureObjectsDetection_2eproto;
};
// -------------------------------------------------------------------

class PictureDetectedObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.PictureDetectedObject) */ {
 public:
  inline PictureDetectedObject() : PictureDetectedObject(nullptr) {}
  virtual ~PictureDetectedObject();

  PictureDetectedObject(const PictureDetectedObject& from);
  PictureDetectedObject(PictureDetectedObject&& from) noexcept
    : PictureDetectedObject() {
    *this = ::std::move(from);
  }

  inline PictureDetectedObject& operator=(const PictureDetectedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PictureDetectedObject& operator=(PictureDetectedObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PictureDetectedObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PictureDetectedObject* internal_default_instance() {
    return reinterpret_cast<const PictureDetectedObject*>(
               &_PictureDetectedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PictureDetectedObject& a, PictureDetectedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PictureDetectedObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PictureDetectedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PictureDetectedObject* New() const final {
    return CreateMaybeMessage<PictureDetectedObject>(nullptr);
  }

  PictureDetectedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PictureDetectedObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PictureDetectedObject& from);
  void MergeFrom(const PictureDetectedObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PictureDetectedObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.PictureDetectedObject";
  }
  protected:
  explicit PictureDetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PictureObjectsDetection_2eproto);
    return ::descriptor_table_PictureObjectsDetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 5,
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kConfidenceFieldNumber = 6,
  };
  // optional string label = 5;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required double x1 = 1;
  bool has_x1() const;
  private:
  bool _internal_has_x1() const;
  public:
  void clear_x1();
  double x1() const;
  void set_x1(double value);
  private:
  double _internal_x1() const;
  void _internal_set_x1(double value);
  public:

  // required double y1 = 2;
  bool has_y1() const;
  private:
  bool _internal_has_y1() const;
  public:
  void clear_y1();
  double y1() const;
  void set_y1(double value);
  private:
  double _internal_y1() const;
  void _internal_set_y1(double value);
  public:

  // required double x2 = 3;
  bool has_x2() const;
  private:
  bool _internal_has_x2() const;
  public:
  void clear_x2();
  double x2() const;
  void set_x2(double value);
  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);
  public:

  // required double y2 = 4;
  bool has_y2() const;
  private:
  bool _internal_has_y2() const;
  public:
  void clear_y2();
  double y2() const;
  void set_y2(double value);
  private:
  double _internal_y2() const;
  void _internal_set_y2(double value);
  public:

  // optional double confidence = 6;
  bool has_confidence() const;
  private:
  bool _internal_has_confidence() const;
  public:
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.PictureDetectedObject)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  double x1_;
  double y1_;
  double x2_;
  double y2_;
  double confidence_;
  friend struct ::TableStruct_PictureObjectsDetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PictureDetectedObjectsHistory

// repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
inline int PictureDetectedObjectsHistory::_internal_picturesdetectedobjects_size() const {
  return picturesdetectedobjects_.size();
}
inline int PictureDetectedObjectsHistory::picturesdetectedobjects_size() const {
  return _internal_picturesdetectedobjects_size();
}
inline void PictureDetectedObjectsHistory::clear_picturesdetectedobjects() {
  picturesdetectedobjects_.Clear();
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::mutable_picturesdetectedobjects(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return picturesdetectedobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >*
PictureDetectedObjectsHistory::mutable_picturesdetectedobjects() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return &picturesdetectedobjects_;
}
inline const ::org::copdai::core::model::PictureDetectedObjects& PictureDetectedObjectsHistory::_internal_picturesdetectedobjects(int index) const {
  return picturesdetectedobjects_.Get(index);
}
inline const ::org::copdai::core::model::PictureDetectedObjects& PictureDetectedObjectsHistory::picturesdetectedobjects(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return _internal_picturesdetectedobjects(index);
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::_internal_add_picturesdetectedobjects() {
  return picturesdetectedobjects_.Add();
}
inline ::org::copdai::core::model::PictureDetectedObjects* PictureDetectedObjectsHistory::add_picturesdetectedobjects() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return _internal_add_picturesdetectedobjects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObjects >&
PictureDetectedObjectsHistory::picturesdetectedobjects() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.PictureDetectedObjectsHistory.picturesDetectedObjects)
  return picturesdetectedobjects_;
}

// required double sentTime = 13;
inline bool PictureDetectedObjectsHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void PictureDetectedObjectsHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PictureDetectedObjectsHistory::_internal_senttime() const {
  return senttime_;
}
inline double PictureDetectedObjectsHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.sentTime)
  return _internal_senttime();
}
inline void PictureDetectedObjectsHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void PictureDetectedObjectsHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.sentTime)
}

// required double startTime = 14;
inline bool PictureDetectedObjectsHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void PictureDetectedObjectsHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PictureDetectedObjectsHistory::_internal_starttime() const {
  return starttime_;
}
inline double PictureDetectedObjectsHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.startTime)
  return _internal_starttime();
}
inline void PictureDetectedObjectsHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void PictureDetectedObjectsHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.startTime)
}

// required double endTime = 15;
inline bool PictureDetectedObjectsHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PictureDetectedObjectsHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void PictureDetectedObjectsHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PictureDetectedObjectsHistory::_internal_endtime() const {
  return endtime_;
}
inline double PictureDetectedObjectsHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjectsHistory.endTime)
  return _internal_endtime();
}
inline void PictureDetectedObjectsHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void PictureDetectedObjectsHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjectsHistory.endTime)
}

// -------------------------------------------------------------------

// PictureDetectedObjects

// repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
inline int PictureDetectedObjects::_internal_picturedetectedobjects_size() const {
  return picturedetectedobjects_.size();
}
inline int PictureDetectedObjects::picturedetectedobjects_size() const {
  return _internal_picturedetectedobjects_size();
}
inline void PictureDetectedObjects::clear_picturedetectedobjects() {
  picturedetectedobjects_.Clear();
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::mutable_picturedetectedobjects(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return picturedetectedobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >*
PictureDetectedObjects::mutable_picturedetectedobjects() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return &picturedetectedobjects_;
}
inline const ::org::copdai::core::model::PictureDetectedObject& PictureDetectedObjects::_internal_picturedetectedobjects(int index) const {
  return picturedetectedobjects_.Get(index);
}
inline const ::org::copdai::core::model::PictureDetectedObject& PictureDetectedObjects::picturedetectedobjects(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return _internal_picturedetectedobjects(index);
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::_internal_add_picturedetectedobjects() {
  return picturedetectedobjects_.Add();
}
inline ::org::copdai::core::model::PictureDetectedObject* PictureDetectedObjects::add_picturedetectedobjects() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return _internal_add_picturedetectedobjects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::PictureDetectedObject >&
PictureDetectedObjects::picturedetectedobjects() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.PictureDetectedObjects.pictureDetectedObjects)
  return picturedetectedobjects_;
}

// required double time = 15;
inline bool PictureDetectedObjects::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObjects::has_time() const {
  return _internal_has_time();
}
inline void PictureDetectedObjects::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double PictureDetectedObjects::_internal_time() const {
  return time_;
}
inline double PictureDetectedObjects::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObjects.time)
  return _internal_time();
}
inline void PictureDetectedObjects::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void PictureDetectedObjects::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObjects.time)
}

// -------------------------------------------------------------------

// PictureDetectedObject

// required double x1 = 1;
inline bool PictureDetectedObject::_internal_has_x1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_x1() const {
  return _internal_has_x1();
}
inline void PictureDetectedObject::clear_x1() {
  x1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double PictureDetectedObject::_internal_x1() const {
  return x1_;
}
inline double PictureDetectedObject::x1() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.x1)
  return _internal_x1();
}
inline void PictureDetectedObject::_internal_set_x1(double value) {
  _has_bits_[0] |= 0x00000002u;
  x1_ = value;
}
inline void PictureDetectedObject::set_x1(double value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.x1)
}

// required double y1 = 2;
inline bool PictureDetectedObject::_internal_has_y1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_y1() const {
  return _internal_has_y1();
}
inline void PictureDetectedObject::clear_y1() {
  y1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double PictureDetectedObject::_internal_y1() const {
  return y1_;
}
inline double PictureDetectedObject::y1() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.y1)
  return _internal_y1();
}
inline void PictureDetectedObject::_internal_set_y1(double value) {
  _has_bits_[0] |= 0x00000004u;
  y1_ = value;
}
inline void PictureDetectedObject::set_y1(double value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.y1)
}

// required double x2 = 3;
inline bool PictureDetectedObject::_internal_has_x2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_x2() const {
  return _internal_has_x2();
}
inline void PictureDetectedObject::clear_x2() {
  x2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double PictureDetectedObject::_internal_x2() const {
  return x2_;
}
inline double PictureDetectedObject::x2() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.x2)
  return _internal_x2();
}
inline void PictureDetectedObject::_internal_set_x2(double value) {
  _has_bits_[0] |= 0x00000008u;
  x2_ = value;
}
inline void PictureDetectedObject::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.x2)
}

// required double y2 = 4;
inline bool PictureDetectedObject::_internal_has_y2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_y2() const {
  return _internal_has_y2();
}
inline void PictureDetectedObject::clear_y2() {
  y2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PictureDetectedObject::_internal_y2() const {
  return y2_;
}
inline double PictureDetectedObject::y2() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.y2)
  return _internal_y2();
}
inline void PictureDetectedObject::_internal_set_y2(double value) {
  _has_bits_[0] |= 0x00000010u;
  y2_ = value;
}
inline void PictureDetectedObject::set_y2(double value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.y2)
}

// optional string label = 5;
inline bool PictureDetectedObject::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_label() const {
  return _internal_has_label();
}
inline void PictureDetectedObject::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PictureDetectedObject::label() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.label)
  return _internal_label();
}
inline void PictureDetectedObject::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.label)
}
inline std::string* PictureDetectedObject::mutable_label() {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.PictureDetectedObject.label)
  return _internal_mutable_label();
}
inline const std::string& PictureDetectedObject::_internal_label() const {
  return label_.Get();
}
inline void PictureDetectedObject::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PictureDetectedObject::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:org.copdai.core.model.PictureDetectedObject.label)
}
inline void PictureDetectedObject::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:org.copdai.core.model.PictureDetectedObject.label)
}
inline void PictureDetectedObject::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:org.copdai.core.model.PictureDetectedObject.label)
}
inline std::string* PictureDetectedObject::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PictureDetectedObject::release_label() {
  // @@protoc_insertion_point(field_release:org.copdai.core.model.PictureDetectedObject.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PictureDetectedObject::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:org.copdai.core.model.PictureDetectedObject.label)
}

// optional double confidence = 6;
inline bool PictureDetectedObject::_internal_has_confidence() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PictureDetectedObject::has_confidence() const {
  return _internal_has_confidence();
}
inline void PictureDetectedObject::clear_confidence() {
  confidence_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PictureDetectedObject::_internal_confidence() const {
  return confidence_;
}
inline double PictureDetectedObject::confidence() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.PictureDetectedObject.confidence)
  return _internal_confidence();
}
inline void PictureDetectedObject::_internal_set_confidence(double value) {
  _has_bits_[0] |= 0x00000020u;
  confidence_ = value;
}
inline void PictureDetectedObject::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.PictureDetectedObject.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PictureObjectsDetection_2eproto
