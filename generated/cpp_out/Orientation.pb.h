// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Orientation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Orientation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Orientation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Orientation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Orientation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Orientation_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class OrientationHistory;
class OrientationHistoryDefaultTypeInternal;
extern OrientationHistoryDefaultTypeInternal _OrientationHistory_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::copdai::core::model::Orientation* Arena::CreateMaybeMessage<::org::copdai::core::model::Orientation>(Arena*);
template<> ::org::copdai::core::model::OrientationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::OrientationHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

class OrientationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.OrientationHistory) */ {
 public:
  inline OrientationHistory() : OrientationHistory(nullptr) {}
  virtual ~OrientationHistory();

  OrientationHistory(const OrientationHistory& from);
  OrientationHistory(OrientationHistory&& from) noexcept
    : OrientationHistory() {
    *this = ::std::move(from);
  }

  inline OrientationHistory& operator=(const OrientationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrientationHistory& operator=(OrientationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrientationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrientationHistory* internal_default_instance() {
    return reinterpret_cast<const OrientationHistory*>(
               &_OrientationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrientationHistory& a, OrientationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(OrientationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrientationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrientationHistory* New() const final {
    return CreateMaybeMessage<OrientationHistory>(nullptr);
  }

  OrientationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrientationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrientationHistory& from);
  void MergeFrom(const OrientationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrientationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.OrientationHistory";
  }
  protected:
  explicit OrientationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orientation_2eproto);
    return ::descriptor_table_Orientation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.Orientation orientations = 1;
  int orientations_size() const;
  private:
  int _internal_orientations_size() const;
  public:
  void clear_orientations();
  ::org::copdai::core::model::Orientation* mutable_orientations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >*
      mutable_orientations();
  private:
  const ::org::copdai::core::model::Orientation& _internal_orientations(int index) const;
  ::org::copdai::core::model::Orientation* _internal_add_orientations();
  public:
  const ::org::copdai::core::model::Orientation& orientations(int index) const;
  ::org::copdai::core::model::Orientation* add_orientations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >&
      orientations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.OrientationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation > orientations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_Orientation_2eproto;
};
// -------------------------------------------------------------------

class Orientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  virtual ~Orientation();

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Orientation_2eproto);
    return ::descriptor_table_Orientation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRollFieldNumber = 3,
    kTimeFieldNumber = 15,
  };
  // required double azimuth = 1;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // required double pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // required double roll = 3;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.Orientation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double azimuth_;
  double pitch_;
  double roll_;
  double time_;
  friend struct ::TableStruct_Orientation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrientationHistory

// repeated .org.copdai.core.model.Orientation orientations = 1;
inline int OrientationHistory::_internal_orientations_size() const {
  return orientations_.size();
}
inline int OrientationHistory::orientations_size() const {
  return _internal_orientations_size();
}
inline void OrientationHistory::clear_orientations() {
  orientations_.Clear();
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::mutable_orientations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.OrientationHistory.orientations)
  return orientations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >*
OrientationHistory::mutable_orientations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.OrientationHistory.orientations)
  return &orientations_;
}
inline const ::org::copdai::core::model::Orientation& OrientationHistory::_internal_orientations(int index) const {
  return orientations_.Get(index);
}
inline const ::org::copdai::core::model::Orientation& OrientationHistory::orientations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.orientations)
  return _internal_orientations(index);
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::_internal_add_orientations() {
  return orientations_.Add();
}
inline ::org::copdai::core::model::Orientation* OrientationHistory::add_orientations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.OrientationHistory.orientations)
  return _internal_add_orientations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Orientation >&
OrientationHistory::orientations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.OrientationHistory.orientations)
  return orientations_;
}

// required double sentTime = 13;
inline bool OrientationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OrientationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void OrientationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double OrientationHistory::_internal_senttime() const {
  return senttime_;
}
inline double OrientationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.sentTime)
  return _internal_senttime();
}
inline void OrientationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void OrientationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.sentTime)
}

// required double startTime = 14;
inline bool OrientationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OrientationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void OrientationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double OrientationHistory::_internal_starttime() const {
  return starttime_;
}
inline double OrientationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.startTime)
  return _internal_starttime();
}
inline void OrientationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void OrientationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.startTime)
}

// required double endTime = 15;
inline bool OrientationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OrientationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void OrientationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double OrientationHistory::_internal_endtime() const {
  return endtime_;
}
inline double OrientationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.OrientationHistory.endTime)
  return _internal_endtime();
}
inline void OrientationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void OrientationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.OrientationHistory.endTime)
}

// -------------------------------------------------------------------

// Orientation

// required double azimuth = 1;
inline bool Orientation::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Orientation::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void Orientation::clear_azimuth() {
  azimuth_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Orientation::_internal_azimuth() const {
  return azimuth_;
}
inline double Orientation::azimuth() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.azimuth)
  return _internal_azimuth();
}
inline void Orientation::_internal_set_azimuth(double value) {
  _has_bits_[0] |= 0x00000001u;
  azimuth_ = value;
}
inline void Orientation::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.azimuth)
}

// required double pitch = 2;
inline bool Orientation::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Orientation::has_pitch() const {
  return _internal_has_pitch();
}
inline void Orientation::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Orientation::_internal_pitch() const {
  return pitch_;
}
inline double Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.pitch)
  return _internal_pitch();
}
inline void Orientation::_internal_set_pitch(double value) {
  _has_bits_[0] |= 0x00000002u;
  pitch_ = value;
}
inline void Orientation::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.pitch)
}

// required double roll = 3;
inline bool Orientation::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Orientation::has_roll() const {
  return _internal_has_roll();
}
inline void Orientation::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Orientation::_internal_roll() const {
  return roll_;
}
inline double Orientation::roll() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.roll)
  return _internal_roll();
}
inline void Orientation::_internal_set_roll(double value) {
  _has_bits_[0] |= 0x00000004u;
  roll_ = value;
}
inline void Orientation::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.roll)
}

// required double time = 15;
inline bool Orientation::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Orientation::has_time() const {
  return _internal_has_time();
}
inline void Orientation::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Orientation::_internal_time() const {
  return time_;
}
inline double Orientation::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Orientation.time)
  return _internal_time();
}
inline void Orientation::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void Orientation::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Orientation.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Orientation_2eproto
