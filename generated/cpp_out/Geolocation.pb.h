// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Geolocation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Geolocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Geolocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Geolocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Geolocation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Geolocation_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class Geolocation;
class GeolocationDefaultTypeInternal;
extern GeolocationDefaultTypeInternal _Geolocation_default_instance_;
class GeolocationHistory;
class GeolocationHistoryDefaultTypeInternal;
extern GeolocationHistoryDefaultTypeInternal _GeolocationHistory_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::copdai::core::model::Geolocation* Arena::CreateMaybeMessage<::org::copdai::core::model::Geolocation>(Arena*);
template<> ::org::copdai::core::model::GeolocationHistory* Arena::CreateMaybeMessage<::org::copdai::core::model::GeolocationHistory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

class GeolocationHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.GeolocationHistory) */ {
 public:
  inline GeolocationHistory() : GeolocationHistory(nullptr) {}
  virtual ~GeolocationHistory();

  GeolocationHistory(const GeolocationHistory& from);
  GeolocationHistory(GeolocationHistory&& from) noexcept
    : GeolocationHistory() {
    *this = ::std::move(from);
  }

  inline GeolocationHistory& operator=(const GeolocationHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeolocationHistory& operator=(GeolocationHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeolocationHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeolocationHistory* internal_default_instance() {
    return reinterpret_cast<const GeolocationHistory*>(
               &_GeolocationHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeolocationHistory& a, GeolocationHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(GeolocationHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeolocationHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeolocationHistory* New() const final {
    return CreateMaybeMessage<GeolocationHistory>(nullptr);
  }

  GeolocationHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeolocationHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeolocationHistory& from);
  void MergeFrom(const GeolocationHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeolocationHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.GeolocationHistory";
  }
  protected:
  explicit GeolocationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geolocation_2eproto);
    return ::descriptor_table_Geolocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeolocationsFieldNumber = 1,
    kSentTimeFieldNumber = 13,
    kStartTimeFieldNumber = 14,
    kEndTimeFieldNumber = 15,
  };
  // repeated .org.copdai.core.model.Geolocation geolocations = 1;
  int geolocations_size() const;
  private:
  int _internal_geolocations_size() const;
  public:
  void clear_geolocations();
  ::org::copdai::core::model::Geolocation* mutable_geolocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >*
      mutable_geolocations();
  private:
  const ::org::copdai::core::model::Geolocation& _internal_geolocations(int index) const;
  ::org::copdai::core::model::Geolocation* _internal_add_geolocations();
  public:
  const ::org::copdai::core::model::Geolocation& geolocations(int index) const;
  ::org::copdai::core::model::Geolocation* add_geolocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >&
      geolocations() const;

  // required double sentTime = 13;
  bool has_senttime() const;
  private:
  bool _internal_has_senttime() const;
  public:
  void clear_senttime();
  double senttime() const;
  void set_senttime(double value);
  private:
  double _internal_senttime() const;
  void _internal_set_senttime(double value);
  public:

  // required double startTime = 14;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  double starttime() const;
  void set_starttime(double value);
  private:
  double _internal_starttime() const;
  void _internal_set_starttime(double value);
  public:

  // required double endTime = 15;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  double endtime() const;
  void set_endtime(double value);
  private:
  double _internal_endtime() const;
  void _internal_set_endtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.GeolocationHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation > geolocations_;
  double senttime_;
  double starttime_;
  double endtime_;
  friend struct ::TableStruct_Geolocation_2eproto;
};
// -------------------------------------------------------------------

class Geolocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.copdai.core.model.Geolocation) */ {
 public:
  inline Geolocation() : Geolocation(nullptr) {}
  virtual ~Geolocation();

  Geolocation(const Geolocation& from);
  Geolocation(Geolocation&& from) noexcept
    : Geolocation() {
    *this = ::std::move(from);
  }

  inline Geolocation& operator=(const Geolocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geolocation& operator=(Geolocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geolocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geolocation* internal_default_instance() {
    return reinterpret_cast<const Geolocation*>(
               &_Geolocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Geolocation& a, Geolocation& b) {
    a.Swap(&b);
  }
  inline void Swap(Geolocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geolocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geolocation* New() const final {
    return CreateMaybeMessage<Geolocation>(nullptr);
  }

  Geolocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geolocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geolocation& from);
  void MergeFrom(const Geolocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geolocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.copdai.core.model.Geolocation";
  }
  protected:
  explicit Geolocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Geolocation_2eproto);
    return ::descriptor_table_Geolocation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
    kAltFieldNumber = 3,
    kAccuracyFieldNumber = 4,
    kSpeedFieldNumber = 5,
    kTimeFieldNumber = 15,
  };
  // required double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required double lng = 2;
  bool has_lng() const;
  private:
  bool _internal_has_lng() const;
  public:
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // optional double alt = 3;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // optional double accuracy = 4;
  bool has_accuracy() const;
  private:
  bool _internal_has_accuracy() const;
  public:
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // optional double speed = 5;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double time = 15;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:org.copdai.core.model.Geolocation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double lat_;
  double lng_;
  double alt_;
  double accuracy_;
  double speed_;
  double time_;
  friend struct ::TableStruct_Geolocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeolocationHistory

// repeated .org.copdai.core.model.Geolocation geolocations = 1;
inline int GeolocationHistory::_internal_geolocations_size() const {
  return geolocations_.size();
}
inline int GeolocationHistory::geolocations_size() const {
  return _internal_geolocations_size();
}
inline void GeolocationHistory::clear_geolocations() {
  geolocations_.Clear();
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::mutable_geolocations(int index) {
  // @@protoc_insertion_point(field_mutable:org.copdai.core.model.GeolocationHistory.geolocations)
  return geolocations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >*
GeolocationHistory::mutable_geolocations() {
  // @@protoc_insertion_point(field_mutable_list:org.copdai.core.model.GeolocationHistory.geolocations)
  return &geolocations_;
}
inline const ::org::copdai::core::model::Geolocation& GeolocationHistory::_internal_geolocations(int index) const {
  return geolocations_.Get(index);
}
inline const ::org::copdai::core::model::Geolocation& GeolocationHistory::geolocations(int index) const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.geolocations)
  return _internal_geolocations(index);
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::_internal_add_geolocations() {
  return geolocations_.Add();
}
inline ::org::copdai::core::model::Geolocation* GeolocationHistory::add_geolocations() {
  // @@protoc_insertion_point(field_add:org.copdai.core.model.GeolocationHistory.geolocations)
  return _internal_add_geolocations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::copdai::core::model::Geolocation >&
GeolocationHistory::geolocations() const {
  // @@protoc_insertion_point(field_list:org.copdai.core.model.GeolocationHistory.geolocations)
  return geolocations_;
}

// required double sentTime = 13;
inline bool GeolocationHistory::_internal_has_senttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GeolocationHistory::has_senttime() const {
  return _internal_has_senttime();
}
inline void GeolocationHistory::clear_senttime() {
  senttime_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GeolocationHistory::_internal_senttime() const {
  return senttime_;
}
inline double GeolocationHistory::senttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.sentTime)
  return _internal_senttime();
}
inline void GeolocationHistory::_internal_set_senttime(double value) {
  _has_bits_[0] |= 0x00000001u;
  senttime_ = value;
}
inline void GeolocationHistory::set_senttime(double value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.sentTime)
}

// required double startTime = 14;
inline bool GeolocationHistory::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GeolocationHistory::has_starttime() const {
  return _internal_has_starttime();
}
inline void GeolocationHistory::clear_starttime() {
  starttime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GeolocationHistory::_internal_starttime() const {
  return starttime_;
}
inline double GeolocationHistory::starttime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.startTime)
  return _internal_starttime();
}
inline void GeolocationHistory::_internal_set_starttime(double value) {
  _has_bits_[0] |= 0x00000002u;
  starttime_ = value;
}
inline void GeolocationHistory::set_starttime(double value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.startTime)
}

// required double endTime = 15;
inline bool GeolocationHistory::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GeolocationHistory::has_endtime() const {
  return _internal_has_endtime();
}
inline void GeolocationHistory::clear_endtime() {
  endtime_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GeolocationHistory::_internal_endtime() const {
  return endtime_;
}
inline double GeolocationHistory::endtime() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.GeolocationHistory.endTime)
  return _internal_endtime();
}
inline void GeolocationHistory::_internal_set_endtime(double value) {
  _has_bits_[0] |= 0x00000004u;
  endtime_ = value;
}
inline void GeolocationHistory::set_endtime(double value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.GeolocationHistory.endTime)
}

// -------------------------------------------------------------------

// Geolocation

// required double lat = 1;
inline bool Geolocation::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Geolocation::has_lat() const {
  return _internal_has_lat();
}
inline void Geolocation::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Geolocation::_internal_lat() const {
  return lat_;
}
inline double Geolocation::lat() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.lat)
  return _internal_lat();
}
inline void Geolocation::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000001u;
  lat_ = value;
}
inline void Geolocation::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.lat)
}

// required double lng = 2;
inline bool Geolocation::_internal_has_lng() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Geolocation::has_lng() const {
  return _internal_has_lng();
}
inline void Geolocation::clear_lng() {
  lng_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Geolocation::_internal_lng() const {
  return lng_;
}
inline double Geolocation::lng() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.lng)
  return _internal_lng();
}
inline void Geolocation::_internal_set_lng(double value) {
  _has_bits_[0] |= 0x00000002u;
  lng_ = value;
}
inline void Geolocation::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.lng)
}

// optional double alt = 3;
inline bool Geolocation::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Geolocation::has_alt() const {
  return _internal_has_alt();
}
inline void Geolocation::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Geolocation::_internal_alt() const {
  return alt_;
}
inline double Geolocation::alt() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.alt)
  return _internal_alt();
}
inline void Geolocation::_internal_set_alt(double value) {
  _has_bits_[0] |= 0x00000004u;
  alt_ = value;
}
inline void Geolocation::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.alt)
}

// optional double accuracy = 4;
inline bool Geolocation::_internal_has_accuracy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Geolocation::has_accuracy() const {
  return _internal_has_accuracy();
}
inline void Geolocation::clear_accuracy() {
  accuracy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Geolocation::_internal_accuracy() const {
  return accuracy_;
}
inline double Geolocation::accuracy() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.accuracy)
  return _internal_accuracy();
}
inline void Geolocation::_internal_set_accuracy(double value) {
  _has_bits_[0] |= 0x00000008u;
  accuracy_ = value;
}
inline void Geolocation::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.accuracy)
}

// optional double speed = 5;
inline bool Geolocation::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Geolocation::has_speed() const {
  return _internal_has_speed();
}
inline void Geolocation::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Geolocation::_internal_speed() const {
  return speed_;
}
inline double Geolocation::speed() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.speed)
  return _internal_speed();
}
inline void Geolocation::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
}
inline void Geolocation::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.speed)
}

// required double time = 15;
inline bool Geolocation::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Geolocation::has_time() const {
  return _internal_has_time();
}
inline void Geolocation::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Geolocation::_internal_time() const {
  return time_;
}
inline double Geolocation::time() const {
  // @@protoc_insertion_point(field_get:org.copdai.core.model.Geolocation.time)
  return _internal_time();
}
inline void Geolocation::_internal_set_time(double value) {
  _has_bits_[0] |= 0x00000020u;
  time_ = value;
}
inline void Geolocation::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:org.copdai.core.model.Geolocation.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Geolocation_2eproto
