// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors_data_model.proto

#include "sensors_data_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Geolocation_sensors_5fdata_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_sensors_5fdata_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sensors_5fdata_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto;
namespace org {
namespace copdai {
namespace core {
namespace model {
class GeolocationHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeolocationHistory> _instance;
} _GeolocationHistory_default_instance_;
class GeolocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geolocation> _instance;
} _Geolocation_default_instance_;
class AngularAccelerationHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularAccelerationHistory> _instance;
} _AngularAccelerationHistory_default_instance_;
class AngularAccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularAcceleration> _instance;
} _AngularAcceleration_default_instance_;
class LinearAccelerationHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearAccelerationHistory> _instance;
} _LinearAccelerationHistory_default_instance_;
class LinearAccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearAcceleration> _instance;
} _LinearAcceleration_default_instance_;
class OrientationHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrientationHistory> _instance;
} _OrientationHistory_default_instance_;
class OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Orientation> _instance;
} _Orientation_default_instance_;
class PictureDetectedObjectsHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObjectsHistory> _instance;
} _PictureDetectedObjectsHistory_default_instance_;
class PictureDetectedObjectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObjects> _instance;
} _PictureDetectedObjects_default_instance_;
class PictureDetectedObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PictureDetectedObject> _instance;
} _PictureDetectedObject_default_instance_;
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
static void InitDefaultsscc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_AngularAcceleration_default_instance_;
    new (ptr) ::org::copdai::core::model::AngularAcceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::AngularAcceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_AngularAccelerationHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::AngularAccelerationHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::AngularAccelerationHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Geolocation_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_Geolocation_default_instance_;
    new (ptr) ::org::copdai::core::model::Geolocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::Geolocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Geolocation_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Geolocation_sensors_5fdata_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_GeolocationHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::GeolocationHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::GeolocationHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_Geolocation_sensors_5fdata_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_LinearAcceleration_default_instance_;
    new (ptr) ::org::copdai::core::model::LinearAcceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::LinearAcceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_LinearAccelerationHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::LinearAccelerationHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::LinearAccelerationHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_Orientation_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_Orientation_default_instance_;
    new (ptr) ::org::copdai::core::model::Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Orientation_sensors_5fdata_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_OrientationHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::OrientationHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::OrientationHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_Orientation_sensors_5fdata_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObject_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObjects_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObjects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObjects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::org::copdai::core::model::_PictureDetectedObjectsHistory_default_instance_;
    new (ptr) ::org::copdai::core::model::PictureDetectedObjectsHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::org::copdai::core::model::PictureDetectedObjectsHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto}, {
      &scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensors_5fdata_5fmodel_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensors_5fdata_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensors_5fdata_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensors_5fdata_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, geolocations_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::GeolocationHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, lat_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, lng_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, alt_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, accuracy_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, speed_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Geolocation, time_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, angularaccelerations_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAccelerationHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, x_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, y_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, z_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::AngularAcceleration, time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, linearaccelerations_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAccelerationHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, x_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, y_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, z_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::LinearAcceleration, time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, orientations_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::OrientationHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, azimuth_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, pitch_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, roll_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::Orientation, time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, picturesdetectedobjects_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, senttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, starttime_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjectsHistory, endtime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, picturedetectedobjects_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObjects, time_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, x1_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, y1_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, x2_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, y2_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, label_),
  PROTOBUF_FIELD_OFFSET(::org::copdai::core::model::PictureDetectedObject, confidence_),
  1,
  2,
  3,
  4,
  0,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::org::copdai::core::model::GeolocationHistory)},
  { 13, 24, sizeof(::org::copdai::core::model::Geolocation)},
  { 30, 39, sizeof(::org::copdai::core::model::AngularAccelerationHistory)},
  { 43, 52, sizeof(::org::copdai::core::model::AngularAcceleration)},
  { 56, 65, sizeof(::org::copdai::core::model::LinearAccelerationHistory)},
  { 69, 78, sizeof(::org::copdai::core::model::LinearAcceleration)},
  { 82, 91, sizeof(::org::copdai::core::model::OrientationHistory)},
  { 95, 104, sizeof(::org::copdai::core::model::Orientation)},
  { 108, 117, sizeof(::org::copdai::core::model::PictureDetectedObjectsHistory)},
  { 121, 128, sizeof(::org::copdai::core::model::PictureDetectedObjects)},
  { 130, 141, sizeof(::org::copdai::core::model::PictureDetectedObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_GeolocationHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_Geolocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_AngularAccelerationHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_AngularAcceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_LinearAccelerationHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_LinearAcceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_OrientationHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObjectsHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::org::copdai::core::model::_PictureDetectedObject_default_instance_),
};

const char descriptor_table_protodef_sensors_5fdata_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030sensors_data_model.proto\022\025org.copdai.c"
  "ore.model\"\204\001\n\022GeolocationHistory\0228\n\014geol"
  "ocations\030\001 \003(\0132\".org.copdai.core.model.G"
  "eolocation\022\020\n\010sentTime\030\r \002(\001\022\021\n\tstartTim"
  "e\030\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"c\n\013Geolocation\022"
  "\013\n\003lat\030\001 \002(\001\022\013\n\003lng\030\002 \002(\001\022\013\n\003alt\030\003 \001(\001\022\020"
  "\n\010accuracy\030\004 \001(\001\022\r\n\005speed\030\005 \001(\001\022\014\n\004time\030"
  "\017 \002(\001\"\234\001\n\032AngularAccelerationHistory\022H\n\024"
  "angularAccelerations\030\001 \003(\0132*.org.copdai."
  "core.model.AngularAcceleration\022\020\n\010sentTi"
  "me\030\r \002(\001\022\021\n\tstartTime\030\016 \002(\001\022\017\n\007endTime\030\017"
  " \002(\001\"D\n\023AngularAcceleration\022\t\n\001x\030\001 \002(\001\022\t"
  "\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\014\n\004time\030\017 \002(\001\"\231\001\n\031L"
  "inearAccelerationHistory\022F\n\023linearAccele"
  "rations\030\001 \003(\0132).org.copdai.core.model.Li"
  "nearAcceleration\022\020\n\010sentTime\030\r \002(\001\022\021\n\tst"
  "artTime\030\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"C\n\022Linear"
  "Acceleration\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030"
  "\003 \002(\001\022\014\n\004time\030\017 \002(\001\"\204\001\n\022OrientationHisto"
  "ry\0228\n\014orientations\030\001 \003(\0132\".org.copdai.co"
  "re.model.Orientation\022\020\n\010sentTime\030\r \002(\001\022\021"
  "\n\tstartTime\030\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"I\n\013Or"
  "ientation\022\017\n\007azimuth\030\001 \002(\001\022\r\n\005pitch\030\002 \002("
  "\001\022\014\n\004roll\030\003 \002(\001\022\014\n\004time\030\017 \002(\001\"\245\001\n\035Pictur"
  "eDetectedObjectsHistory\022N\n\027picturesDetec"
  "tedObjects\030\001 \003(\0132-.org.copdai.core.model"
  ".PictureDetectedObjects\022\020\n\010sentTime\030\r \002("
  "\001\022\021\n\tstartTime\030\016 \002(\001\022\017\n\007endTime\030\017 \002(\001\"t\n"
  "\026PictureDetectedObjects\022L\n\026pictureDetect"
  "edObjects\030\001 \003(\0132,.org.copdai.core.model."
  "PictureDetectedObject\022\014\n\004time\030\017 \002(\001\"j\n\025P"
  "ictureDetectedObject\022\n\n\002x1\030\001 \002(\001\022\n\n\002y1\030\002"
  " \002(\001\022\n\n\002x2\030\003 \002(\001\022\n\n\002y2\030\004 \002(\001\022\r\n\005label\030\005 "
  "\001(\t\022\022\n\nconfidence\030\006 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensors_5fdata_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sensors_5fdata_5fmodel_2eproto_sccs[11] = {
  &scc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_Geolocation_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_Orientation_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto.base,
  &scc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensors_5fdata_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_5fdata_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_sensors_5fdata_5fmodel_2eproto, "sensors_data_model.proto", 1343,
  &descriptor_table_sensors_5fdata_5fmodel_2eproto_once, descriptor_table_sensors_5fdata_5fmodel_2eproto_sccs, descriptor_table_sensors_5fdata_5fmodel_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_sensors_5fdata_5fmodel_2eproto::offsets,
  file_level_metadata_sensors_5fdata_5fmodel_2eproto, 11, file_level_enum_descriptors_sensors_5fdata_5fmodel_2eproto, file_level_service_descriptors_sensors_5fdata_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sensors_5fdata_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sensors_5fdata_5fmodel_2eproto)), true);
namespace org {
namespace copdai {
namespace core {
namespace model {

// ===================================================================

void GeolocationHistory::InitAsDefaultInstance() {
}
class GeolocationHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<GeolocationHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

GeolocationHistory::GeolocationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  geolocations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.GeolocationHistory)
}
GeolocationHistory::GeolocationHistory(const GeolocationHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      geolocations_(from.geolocations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.GeolocationHistory)
}

void GeolocationHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

GeolocationHistory::~GeolocationHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.GeolocationHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeolocationHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GeolocationHistory::ArenaDtor(void* object) {
  GeolocationHistory* _this = reinterpret_cast< GeolocationHistory* >(object);
  (void)_this;
}
void GeolocationHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeolocationHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeolocationHistory& GeolocationHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeolocationHistory_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void GeolocationHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.GeolocationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geolocations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeolocationHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.Geolocation geolocations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geolocations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeolocationHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.GeolocationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.Geolocation geolocations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geolocations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_geolocations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.GeolocationHistory)
  return target;
}

size_t GeolocationHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.GeolocationHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t GeolocationHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.GeolocationHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.Geolocation geolocations = 1;
  total_size += 1UL * this->_internal_geolocations_size();
  for (const auto& msg : this->geolocations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeolocationHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.GeolocationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const GeolocationHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeolocationHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.GeolocationHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.GeolocationHistory)
    MergeFrom(*source);
  }
}

void GeolocationHistory::MergeFrom(const GeolocationHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.GeolocationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geolocations_.MergeFrom(from.geolocations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeolocationHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.GeolocationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeolocationHistory::CopyFrom(const GeolocationHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.GeolocationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeolocationHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(geolocations_)) return false;
  return true;
}

void GeolocationHistory::InternalSwap(GeolocationHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  geolocations_.InternalSwap(&other->geolocations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeolocationHistory, endtime_)
      + sizeof(GeolocationHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(GeolocationHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeolocationHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Geolocation::InitAsDefaultInstance() {
}
class Geolocation::_Internal {
 public:
  using HasBits = decltype(std::declval<Geolocation>()._has_bits_);
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lng(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

Geolocation::Geolocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.Geolocation)
}
Geolocation::Geolocation(const Geolocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.Geolocation)
}

void Geolocation::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(time_));
}

Geolocation::~Geolocation() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.Geolocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Geolocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Geolocation::ArenaDtor(void* object) {
  Geolocation* _this = reinterpret_cast< Geolocation* >(object);
  (void)_this;
}
void Geolocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Geolocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geolocation& Geolocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geolocation_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Geolocation::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.Geolocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geolocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lng(&has_bits);
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_alt(&has_bits);
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double accuracy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_accuracy(&has_bits);
          accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geolocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.Geolocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // required double lng = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  // optional double alt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_alt(), target);
  }

  // optional double accuracy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_accuracy(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed(), target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.Geolocation)
  return target;
}

size_t Geolocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.Geolocation)
  size_t total_size = 0;

  if (_internal_has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_lng()) {
    // required double lng = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Geolocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.Geolocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double lng = 2;
    total_size += 1 + 8;

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional double alt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double accuracy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geolocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.Geolocation)
  GOOGLE_DCHECK_NE(&from, this);
  const Geolocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geolocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.Geolocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.Geolocation)
    MergeFrom(*source);
  }
}

void Geolocation::MergeFrom(const Geolocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.Geolocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      lng_ = from.lng_;
    }
    if (cached_has_bits & 0x00000004u) {
      alt_ = from.alt_;
    }
    if (cached_has_bits & 0x00000008u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Geolocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.Geolocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geolocation::CopyFrom(const Geolocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.Geolocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geolocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Geolocation::InternalSwap(Geolocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geolocation, time_)
      + sizeof(Geolocation::time_)
      - PROTOBUF_FIELD_OFFSET(Geolocation, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geolocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularAccelerationHistory::InitAsDefaultInstance() {
}
class AngularAccelerationHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<AngularAccelerationHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AngularAccelerationHistory::AngularAccelerationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  angularaccelerations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.AngularAccelerationHistory)
}
AngularAccelerationHistory::AngularAccelerationHistory(const AngularAccelerationHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      angularaccelerations_(from.angularaccelerations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.AngularAccelerationHistory)
}

void AngularAccelerationHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

AngularAccelerationHistory::~AngularAccelerationHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.AngularAccelerationHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularAccelerationHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularAccelerationHistory::ArenaDtor(void* object) {
  AngularAccelerationHistory* _this = reinterpret_cast< AngularAccelerationHistory* >(object);
  (void)_this;
}
void AngularAccelerationHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularAccelerationHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularAccelerationHistory& AngularAccelerationHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AngularAccelerationHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.AngularAccelerationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angularaccelerations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularAccelerationHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.AngularAcceleration angularAccelerations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_angularaccelerations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularAccelerationHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.AngularAccelerationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.AngularAcceleration angularAccelerations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_angularaccelerations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_angularaccelerations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.AngularAccelerationHistory)
  return target;
}

size_t AngularAccelerationHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.AngularAccelerationHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t AngularAccelerationHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.AngularAccelerationHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.AngularAcceleration angularAccelerations = 1;
  total_size += 1UL * this->_internal_angularaccelerations_size();
  for (const auto& msg : this->angularaccelerations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularAccelerationHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.AngularAccelerationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularAccelerationHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularAccelerationHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.AngularAccelerationHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.AngularAccelerationHistory)
    MergeFrom(*source);
  }
}

void AngularAccelerationHistory::MergeFrom(const AngularAccelerationHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.AngularAccelerationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  angularaccelerations_.MergeFrom(from.angularaccelerations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AngularAccelerationHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.AngularAccelerationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularAccelerationHistory::CopyFrom(const AngularAccelerationHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.AngularAccelerationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularAccelerationHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(angularaccelerations_)) return false;
  return true;
}

void AngularAccelerationHistory::InternalSwap(AngularAccelerationHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  angularaccelerations_.InternalSwap(&other->angularaccelerations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularAccelerationHistory, endtime_)
      + sizeof(AngularAccelerationHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(AngularAccelerationHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularAccelerationHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularAcceleration::InitAsDefaultInstance() {
}
class AngularAcceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<AngularAcceleration>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

AngularAcceleration::AngularAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.AngularAcceleration)
}
AngularAcceleration::AngularAcceleration(const AngularAcceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&x_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.AngularAcceleration)
}

void AngularAcceleration::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&x_)) + sizeof(time_));
}

AngularAcceleration::~AngularAcceleration() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.AngularAcceleration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AngularAcceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AngularAcceleration::ArenaDtor(void* object) {
  AngularAcceleration* _this = reinterpret_cast< AngularAcceleration* >(object);
  (void)_this;
}
void AngularAcceleration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AngularAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularAcceleration& AngularAcceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularAcceleration_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AngularAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.AngularAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&x_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AngularAcceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularAcceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.AngularAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.AngularAcceleration)
  return target;
}

size_t AngularAcceleration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.AngularAcceleration)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t AngularAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.AngularAcceleration)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularAcceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.AngularAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularAcceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularAcceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.AngularAcceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.AngularAcceleration)
    MergeFrom(*source);
  }
}

void AngularAcceleration::MergeFrom(const AngularAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.AngularAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AngularAcceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.AngularAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularAcceleration::CopyFrom(const AngularAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.AngularAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularAcceleration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AngularAcceleration::InternalSwap(AngularAcceleration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AngularAcceleration, time_)
      + sizeof(AngularAcceleration::time_)
      - PROTOBUF_FIELD_OFFSET(AngularAcceleration, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularAcceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearAccelerationHistory::InitAsDefaultInstance() {
}
class LinearAccelerationHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearAccelerationHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

LinearAccelerationHistory::LinearAccelerationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  linearaccelerations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.LinearAccelerationHistory)
}
LinearAccelerationHistory::LinearAccelerationHistory(const LinearAccelerationHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      linearaccelerations_(from.linearaccelerations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.LinearAccelerationHistory)
}

void LinearAccelerationHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

LinearAccelerationHistory::~LinearAccelerationHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.LinearAccelerationHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearAccelerationHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearAccelerationHistory::ArenaDtor(void* object) {
  LinearAccelerationHistory* _this = reinterpret_cast< LinearAccelerationHistory* >(object);
  (void)_this;
}
void LinearAccelerationHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearAccelerationHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearAccelerationHistory& LinearAccelerationHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearAccelerationHistory_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LinearAccelerationHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.LinearAccelerationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linearaccelerations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearAccelerationHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.LinearAcceleration linearAccelerations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linearaccelerations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearAccelerationHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.LinearAccelerationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.LinearAcceleration linearAccelerations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linearaccelerations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_linearaccelerations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.LinearAccelerationHistory)
  return target;
}

size_t LinearAccelerationHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.LinearAccelerationHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LinearAccelerationHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.LinearAccelerationHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.LinearAcceleration linearAccelerations = 1;
  total_size += 1UL * this->_internal_linearaccelerations_size();
  for (const auto& msg : this->linearaccelerations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearAccelerationHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.LinearAccelerationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearAccelerationHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearAccelerationHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.LinearAccelerationHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.LinearAccelerationHistory)
    MergeFrom(*source);
  }
}

void LinearAccelerationHistory::MergeFrom(const LinearAccelerationHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.LinearAccelerationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linearaccelerations_.MergeFrom(from.linearaccelerations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearAccelerationHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.LinearAccelerationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearAccelerationHistory::CopyFrom(const LinearAccelerationHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.LinearAccelerationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearAccelerationHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(linearaccelerations_)) return false;
  return true;
}

void LinearAccelerationHistory::InternalSwap(LinearAccelerationHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  linearaccelerations_.InternalSwap(&other->linearaccelerations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearAccelerationHistory, endtime_)
      + sizeof(LinearAccelerationHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(LinearAccelerationHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearAccelerationHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearAcceleration::InitAsDefaultInstance() {
}
class LinearAcceleration::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearAcceleration>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

LinearAcceleration::LinearAcceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.LinearAcceleration)
}
LinearAcceleration::LinearAcceleration(const LinearAcceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&x_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.LinearAcceleration)
}

void LinearAcceleration::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&x_)) + sizeof(time_));
}

LinearAcceleration::~LinearAcceleration() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.LinearAcceleration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearAcceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearAcceleration::ArenaDtor(void* object) {
  LinearAcceleration* _this = reinterpret_cast< LinearAcceleration* >(object);
  (void)_this;
}
void LinearAcceleration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearAcceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearAcceleration& LinearAcceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearAcceleration_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LinearAcceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.LinearAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&x_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearAcceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearAcceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.LinearAcceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.LinearAcceleration)
  return target;
}

size_t LinearAcceleration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.LinearAcceleration)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t LinearAcceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.LinearAcceleration)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearAcceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearAcceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearAcceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.LinearAcceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.LinearAcceleration)
    MergeFrom(*source);
  }
}

void LinearAcceleration::MergeFrom(const LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.LinearAcceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearAcceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearAcceleration::CopyFrom(const LinearAcceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.LinearAcceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearAcceleration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void LinearAcceleration::InternalSwap(LinearAcceleration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearAcceleration, time_)
      + sizeof(LinearAcceleration::time_)
      - PROTOBUF_FIELD_OFFSET(LinearAcceleration, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearAcceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrientationHistory::InitAsDefaultInstance() {
}
class OrientationHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<OrientationHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

OrientationHistory::OrientationHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orientations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.OrientationHistory)
}
OrientationHistory::OrientationHistory(const OrientationHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      orientations_(from.orientations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.OrientationHistory)
}

void OrientationHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

OrientationHistory::~OrientationHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.OrientationHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OrientationHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OrientationHistory::ArenaDtor(void* object) {
  OrientationHistory* _this = reinterpret_cast< OrientationHistory* >(object);
  (void)_this;
}
void OrientationHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrientationHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrientationHistory& OrientationHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrientationHistory_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void OrientationHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.OrientationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrientationHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.Orientation orientations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orientations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrientationHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.OrientationHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.Orientation orientations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orientations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orientations(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.OrientationHistory)
  return target;
}

size_t OrientationHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.OrientationHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t OrientationHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.OrientationHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.Orientation orientations = 1;
  total_size += 1UL * this->_internal_orientations_size();
  for (const auto& msg : this->orientations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrientationHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.OrientationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const OrientationHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrientationHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.OrientationHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.OrientationHistory)
    MergeFrom(*source);
  }
}

void OrientationHistory::MergeFrom(const OrientationHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.OrientationHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientations_.MergeFrom(from.orientations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OrientationHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.OrientationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrientationHistory::CopyFrom(const OrientationHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.OrientationHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrientationHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(orientations_)) return false;
  return true;
}

void OrientationHistory::InternalSwap(OrientationHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  orientations_.InternalSwap(&other->orientations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrientationHistory, endtime_)
      + sizeof(OrientationHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(OrientationHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrientationHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
class Orientation::_Internal {
 public:
  using HasBits = decltype(std::declval<Orientation>()._has_bits_);
  static void set_has_azimuth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(time_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.Orientation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Orientation::ArenaDtor(void* object) {
  Orientation* _this = reinterpret_cast< Orientation* >(object);
  (void)_this;
}
void Orientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Orientation& Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Orientation_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&azimuth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&azimuth_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_azimuth(&has_bits);
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double azimuth = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth(), target);
  }

  // required double pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  // required double roll = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll(), target);
  }

  // required double time = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.Orientation)
  return target;
}

size_t Orientation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.Orientation)
  size_t total_size = 0;

  if (_internal_has_azimuth()) {
    // required double azimuth = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_pitch()) {
    // required double pitch = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_roll()) {
    // required double roll = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required double time = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.Orientation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double azimuth = 1;
    total_size += 1 + 8;

    // required double pitch = 2;
    total_size += 1 + 8;

    // required double roll = 3;
    total_size += 1 + 8;

    // required double time = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      azimuth_ = from.azimuth_;
    }
    if (cached_has_bits & 0x00000002u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation, time_)
      + sizeof(Orientation::time_)
      - PROTOBUF_FIELD_OFFSET(Orientation, azimuth_)>(
          reinterpret_cast<char*>(&azimuth_),
          reinterpret_cast<char*>(&other->azimuth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PictureDetectedObjectsHistory::InitAsDefaultInstance() {
}
class PictureDetectedObjectsHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObjectsHistory>()._has_bits_);
  static void set_has_senttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PictureDetectedObjectsHistory::PictureDetectedObjectsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picturesdetectedobjects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObjectsHistory)
}
PictureDetectedObjectsHistory::PictureDetectedObjectsHistory(const PictureDetectedObjectsHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picturesdetectedobjects_(from.picturesdetectedobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObjectsHistory)
}

void PictureDetectedObjectsHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto.base);
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtime_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
}

PictureDetectedObjectsHistory::~PictureDetectedObjectsHistory() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObjectsHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObjectsHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PictureDetectedObjectsHistory::ArenaDtor(void* object) {
  PictureDetectedObjectsHistory* _this = reinterpret_cast< PictureDetectedObjectsHistory* >(object);
  (void)_this;
}
void PictureDetectedObjectsHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObjectsHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObjectsHistory& PictureDetectedObjectsHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObjectsHistory_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObjectsHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picturesdetectedobjects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&senttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtime_) -
        reinterpret_cast<char*>(&senttime_)) + sizeof(endtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObjectsHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picturesdetectedobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double sentTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_senttime(&has_bits);
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double startTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObjectsHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picturesdetectedobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_picturesdetectedobjects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double sentTime = 13;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_senttime(), target);
  }

  // required double startTime = 14;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_starttime(), target);
  }

  // required double endTime = 15;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObjectsHistory)
  return target;
}

size_t PictureDetectedObjectsHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  size_t total_size = 0;

  if (_internal_has_senttime()) {
    // required double sentTime = 13;
    total_size += 1 + 8;
  }

  if (_internal_has_starttime()) {
    // required double startTime = 14;
    total_size += 1 + 8;
  }

  if (_internal_has_endtime()) {
    // required double endTime = 15;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PictureDetectedObjectsHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double sentTime = 13;
    total_size += 1 + 8;

    // required double startTime = 14;
    total_size += 1 + 8;

    // required double endTime = 15;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObjects picturesDetectedObjects = 1;
  total_size += 1UL * this->_internal_picturesdetectedobjects_size();
  for (const auto& msg : this->picturesdetectedobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObjectsHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObjectsHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObjectsHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObjectsHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObjectsHistory)
    MergeFrom(*source);
  }
}

void PictureDetectedObjectsHistory::MergeFrom(const PictureDetectedObjectsHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picturesdetectedobjects_.MergeFrom(from.picturesdetectedobjects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      senttime_ = from.senttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      endtime_ = from.endtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PictureDetectedObjectsHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObjectsHistory::CopyFrom(const PictureDetectedObjectsHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObjectsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObjectsHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(picturesdetectedobjects_)) return false;
  return true;
}

void PictureDetectedObjectsHistory::InternalSwap(PictureDetectedObjectsHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picturesdetectedobjects_.InternalSwap(&other->picturesdetectedobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PictureDetectedObjectsHistory, endtime_)
      + sizeof(PictureDetectedObjectsHistory::endtime_)
      - PROTOBUF_FIELD_OFFSET(PictureDetectedObjectsHistory, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObjectsHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PictureDetectedObjects::InitAsDefaultInstance() {
}
class PictureDetectedObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObjects>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PictureDetectedObjects::PictureDetectedObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picturedetectedobjects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObjects)
}
PictureDetectedObjects::PictureDetectedObjects(const PictureDetectedObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picturedetectedobjects_(from.picturedetectedobjects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObjects)
}

void PictureDetectedObjects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto.base);
  time_ = 0;
}

PictureDetectedObjects::~PictureDetectedObjects() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObjects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PictureDetectedObjects::ArenaDtor(void* object) {
  PictureDetectedObjects* _this = reinterpret_cast< PictureDetectedObjects* >(object);
  (void)_this;
}
void PictureDetectedObjects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObjects& PictureDetectedObjects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObjects_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picturedetectedobjects_.Clear();
  time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picturedetectedobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required double time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picturedetectedobjects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_picturedetectedobjects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required double time = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObjects)
  return target;
}

size_t PictureDetectedObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObjects)
  size_t total_size = 0;

  // required double time = 15;
  if (_internal_has_time()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .org.copdai.core.model.PictureDetectedObject pictureDetectedObjects = 1;
  total_size += 1UL * this->_internal_picturedetectedobjects_size();
  for (const auto& msg : this->picturedetectedobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObjects)
    MergeFrom(*source);
  }
}

void PictureDetectedObjects::MergeFrom(const PictureDetectedObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picturedetectedobjects_.MergeFrom(from.picturedetectedobjects_);
  if (from._internal_has_time()) {
    _internal_set_time(from._internal_time());
  }
}

void PictureDetectedObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObjects::CopyFrom(const PictureDetectedObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObjects::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(picturedetectedobjects_)) return false;
  return true;
}

void PictureDetectedObjects::InternalSwap(PictureDetectedObjects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picturedetectedobjects_.InternalSwap(&other->picturedetectedobjects_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PictureDetectedObject::InitAsDefaultInstance() {
}
class PictureDetectedObject::_Internal {
 public:
  using HasBits = decltype(std::declval<PictureDetectedObject>()._has_bits_);
  static void set_has_x1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001e) ^ 0x0000001e) != 0;
  }
};

PictureDetectedObject::PictureDetectedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:org.copdai.core.model.PictureDetectedObject)
}
PictureDetectedObject::PictureDetectedObject(const PictureDetectedObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  ::memcpy(&x1_, &from.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:org.copdai.core.model.PictureDetectedObject)
}

void PictureDetectedObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
}

PictureDetectedObject::~PictureDetectedObject() {
  // @@protoc_insertion_point(destructor:org.copdai.core.model.PictureDetectedObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PictureDetectedObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PictureDetectedObject::ArenaDtor(void* object) {
  PictureDetectedObject* _this = reinterpret_cast< PictureDetectedObject* >(object);
  (void)_this;
}
void PictureDetectedObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PictureDetectedObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PictureDetectedObject& PictureDetectedObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PictureDetectedObject_sensors_5fdata_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void PictureDetectedObject::Clear() {
// @@protoc_insertion_point(message_clear_start:org.copdai.core.model.PictureDetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&x1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&x1_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PictureDetectedObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double x1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_x1(&has_bits);
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_y1(&has_bits);
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double x2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_x2(&has_bits);
          x2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double y2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_y2(&has_bits);
          y2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "org.copdai.core.model.PictureDetectedObject.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PictureDetectedObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.copdai.core.model.PictureDetectedObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x1(), target);
  }

  // required double y1 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y1(), target);
  }

  // required double x2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x2(), target);
  }

  // required double y2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y2(), target);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "org.copdai.core.model.PictureDetectedObject.label");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_label(), target);
  }

  // optional double confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:org.copdai.core.model.PictureDetectedObject)
  return target;
}

size_t PictureDetectedObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:org.copdai.core.model.PictureDetectedObject)
  size_t total_size = 0;

  if (_internal_has_x1()) {
    // required double x1 = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y1()) {
    // required double y1 = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_x2()) {
    // required double x2 = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_y2()) {
    // required double y2 = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t PictureDetectedObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:org.copdai.core.model.PictureDetectedObject)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required double x1 = 1;
    total_size += 1 + 8;

    // required double y1 = 2;
    total_size += 1 + 8;

    // required double x2 = 3;
    total_size += 1 + 8;

    // required double y2 = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string label = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // optional double confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PictureDetectedObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:org.copdai.core.model.PictureDetectedObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PictureDetectedObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PictureDetectedObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:org.copdai.core.model.PictureDetectedObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:org.copdai.core.model.PictureDetectedObject)
    MergeFrom(*source);
  }
}

void PictureDetectedObject::MergeFrom(const PictureDetectedObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:org.copdai.core.model.PictureDetectedObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      x1_ = from.x1_;
    }
    if (cached_has_bits & 0x00000004u) {
      y1_ = from.y1_;
    }
    if (cached_has_bits & 0x00000008u) {
      x2_ = from.x2_;
    }
    if (cached_has_bits & 0x00000010u) {
      y2_ = from.y2_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PictureDetectedObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:org.copdai.core.model.PictureDetectedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureDetectedObject::CopyFrom(const PictureDetectedObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:org.copdai.core.model.PictureDetectedObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureDetectedObject::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PictureDetectedObject::InternalSwap(PictureDetectedObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PictureDetectedObject, confidence_)
      + sizeof(PictureDetectedObject::confidence_)
      - PROTOBUF_FIELD_OFFSET(PictureDetectedObject, x1_)>(
          reinterpret_cast<char*>(&x1_),
          reinterpret_cast<char*>(&other->x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PictureDetectedObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace core
}  // namespace copdai
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::GeolocationHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::GeolocationHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::GeolocationHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::Geolocation* Arena::CreateMaybeMessage< ::org::copdai::core::model::Geolocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::Geolocation >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::AngularAccelerationHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::AngularAccelerationHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::AngularAccelerationHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::AngularAcceleration* Arena::CreateMaybeMessage< ::org::copdai::core::model::AngularAcceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::AngularAcceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::LinearAccelerationHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::LinearAccelerationHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::LinearAccelerationHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::LinearAcceleration* Arena::CreateMaybeMessage< ::org::copdai::core::model::LinearAcceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::LinearAcceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::OrientationHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::OrientationHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::OrientationHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::Orientation* Arena::CreateMaybeMessage< ::org::copdai::core::model::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObjectsHistory* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObjectsHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObjectsHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObjects* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::org::copdai::core::model::PictureDetectedObject* Arena::CreateMaybeMessage< ::org::copdai::core::model::PictureDetectedObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::org::copdai::core::model::PictureDetectedObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
